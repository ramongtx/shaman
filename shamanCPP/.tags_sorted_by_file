!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
BINFOLDER	Makefile	/^BINFOLDER = bin\/$/;"	m
CC	Makefile	/^CC = g++$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -Wall$/;"	m
SRCFOLDER	Makefile	/^SRCFOLDER = src\/$/;"	m
TARGET	Makefile	/^TARGET = shaman$/;"	m
TGTSOURCE	Makefile	/^TGTSOURCE = $(SRCFOLDER)$(TARGET).cpp$/;"	m
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
HEADER_PUGICONFIG_HPP	include/pugiconfig.hpp	/^#define HEADER_PUGICONFIG_HPP$/;"	d
ENDSWITH	include/pugixml.cpp	/^	#define ENDSWITH(/;"	d	file:
PUGI__CHECK_ERROR	include/pugixml.cpp	/^		#define PUGI__CHECK_ERROR(/;"	d	file:
PUGI__CHECK_ERROR	include/pugixml.cpp	/^#undef PUGI__CHECK_ERROR$/;"	d	file:
PUGI__DMC_VOLATILE	include/pugixml.cpp	/^#	define PUGI__DMC_VOLATILE /;"	d	file:
PUGI__DMC_VOLATILE	include/pugixml.cpp	/^#	define PUGI__DMC_VOLATILE$/;"	d	file:
PUGI__DMC_VOLATILE	include/pugixml.cpp	/^#undef PUGI__DMC_VOLATILE$/;"	d	file:
PUGI__ENDSEG	include/pugixml.cpp	/^		#define PUGI__ENDSEG(/;"	d	file:
PUGI__ENDSEG	include/pugixml.cpp	/^#undef PUGI__ENDSEG$/;"	d	file:
PUGI__FN	include/pugixml.cpp	/^#	define PUGI__FN /;"	d	file:
PUGI__FN	include/pugixml.cpp	/^#undef PUGI__FN$/;"	d	file:
PUGI__FN_NO_INLINE	include/pugixml.cpp	/^#	define PUGI__FN_NO_INLINE /;"	d	file:
PUGI__FN_NO_INLINE	include/pugixml.cpp	/^#undef PUGI__FN_NO_INLINE$/;"	d	file:
PUGI__IS_CHARTYPE	include/pugixml.cpp	/^	#define PUGI__IS_CHARTYPE(/;"	d	file:
PUGI__IS_CHARTYPE	include/pugixml.cpp	/^#undef PUGI__IS_CHARTYPE$/;"	d	file:
PUGI__IS_CHARTYPEX	include/pugixml.cpp	/^	#define PUGI__IS_CHARTYPEX(/;"	d	file:
PUGI__IS_CHARTYPEX	include/pugixml.cpp	/^#undef PUGI__IS_CHARTYPEX$/;"	d	file:
PUGI__IS_CHARTYPE_IMPL	include/pugixml.cpp	/^	#define PUGI__IS_CHARTYPE_IMPL(/;"	d	file:
PUGI__IS_CHARTYPE_IMPL	include/pugixml.cpp	/^#undef PUGI__IS_CHARTYPE_IMPL$/;"	d	file:
PUGI__MSVC_CRT_VERSION	include/pugixml.cpp	/^#	define PUGI__MSVC_CRT_VERSION /;"	d	file:
PUGI__MSVC_CRT_VERSION	include/pugixml.cpp	/^#undef PUGI__MSVC_CRT_VERSION$/;"	d	file:
PUGI__NO_INLINE	include/pugixml.cpp	/^#	define PUGI__NO_INLINE /;"	d	file:
PUGI__NO_INLINE	include/pugixml.cpp	/^#undef PUGI__NO_INLINE$/;"	d	file:
PUGI__NS_BEGIN	include/pugixml.cpp	/^#	define PUGI__NS_BEGIN /;"	d	file:
PUGI__NS_BEGIN	include/pugixml.cpp	/^#undef PUGI__NS_BEGIN$/;"	d	file:
PUGI__NS_END	include/pugixml.cpp	/^#	define PUGI__NS_END /;"	d	file:
PUGI__NS_END	include/pugixml.cpp	/^#undef PUGI__NS_END$/;"	d	file:
PUGI__OPTSET	include/pugixml.cpp	/^		#define PUGI__OPTSET(/;"	d	file:
PUGI__OPTSET	include/pugixml.cpp	/^#undef PUGI__OPTSET$/;"	d	file:
PUGI__POPNODE	include/pugixml.cpp	/^		#define PUGI__POPNODE(/;"	d	file:
PUGI__POPNODE	include/pugixml.cpp	/^#undef PUGI__POPNODE$/;"	d	file:
PUGI__PUSHNODE	include/pugixml.cpp	/^		#define PUGI__PUSHNODE(/;"	d	file:
PUGI__PUSHNODE	include/pugixml.cpp	/^#undef PUGI__PUSHNODE$/;"	d	file:
PUGI__SCANFOR	include/pugixml.cpp	/^		#define PUGI__SCANFOR(/;"	d	file:
PUGI__SCANFOR	include/pugixml.cpp	/^#undef PUGI__SCANFOR$/;"	d	file:
PUGI__SCANWHILE	include/pugixml.cpp	/^		#define PUGI__SCANWHILE(/;"	d	file:
PUGI__SCANWHILE	include/pugixml.cpp	/^#undef PUGI__SCANWHILE$/;"	d	file:
PUGI__SKIPWS	include/pugixml.cpp	/^		#define PUGI__SKIPWS(/;"	d	file:
PUGI__SKIPWS	include/pugixml.cpp	/^#undef PUGI__SKIPWS$/;"	d	file:
PUGI__STATIC_ASSERT	include/pugixml.cpp	/^#define PUGI__STATIC_ASSERT(/;"	d	file:
PUGI__STATIC_ASSERT	include/pugixml.cpp	/^#undef PUGI__STATIC_ASSERT$/;"	d	file:
PUGI__THROW_ERROR	include/pugixml.cpp	/^		#define PUGI__THROW_ERROR(/;"	d	file:
PUGI__THROW_ERROR	include/pugixml.cpp	/^#undef PUGI__THROW_ERROR$/;"	d	file:
SOURCE_PUGIXML_CPP	include/pugixml.cpp	/^#define SOURCE_PUGIXML_CPP$/;"	d	file:
_Iter_cat	include/pugixml.cpp	/^	PUGI__FN std::bidirectional_iterator_tag _Iter_cat(const pugi::xml_attribute_iterator&)$/;"	f	namespace:std
_Iter_cat	include/pugixml.cpp	/^	PUGI__FN std::bidirectional_iterator_tag _Iter_cat(const pugi::xml_node_iterator&)$/;"	f	namespace:std
_Iter_cat	include/pugixml.cpp	/^	PUGI__FN std::forward_iterator_tag _Iter_cat(const pugi::xml_named_node_iterator&)$/;"	f	namespace:std
__iterator_category	include/pugixml.cpp	/^	PUGI__FN std::bidirectional_iterator_tag __iterator_category(const pugi::xml_attribute_iterator&)$/;"	f	namespace:std
__iterator_category	include/pugixml.cpp	/^	PUGI__FN std::bidirectional_iterator_tag __iterator_category(const pugi::xml_node_iterator&)$/;"	f	namespace:std
__iterator_category	include/pugixml.cpp	/^	PUGI__FN std::forward_iterator_tag __iterator_category(const pugi::xml_named_node_iterator&)$/;"	f	namespace:std
_alloc	include/pugixml.cpp	/^		xpath_allocator* _alloc;$/;"	m	struct:xpath_parser	file:
_assign	include/pugixml.cpp	/^	PUGI__FN void xpath_node_set::_assign(const_iterator begin_, const_iterator end_)$/;"	f	class:pugi::xpath_node_set
_axis	include/pugixml.cpp	/^		char _axis;$/;"	m	class:xpath_ast_node	file:
_begin	include/pugixml.cpp	/^		xpath_node* _begin;$/;"	m	class:xpath_node_set_raw	file:
_buffer	include/pugixml.cpp	/^		const char_t* _buffer;$/;"	m	class:xpath_string	file:
_busy_size	include/pugixml.cpp	/^		size_t _busy_size;$/;"	m	struct:xml_allocator	file:
_cur	include/pugixml.cpp	/^		const char_t* _cur;$/;"	m	class:xpath_lexer	file:
_cur_lexeme	include/pugixml.cpp	/^		lexeme_t _cur_lexeme;$/;"	m	class:xpath_lexer	file:
_cur_lexeme_contents	include/pugixml.cpp	/^		xpath_lexer_string _cur_lexeme_contents;$/;"	m	class:xpath_lexer	file:
_cur_lexeme_pos	include/pugixml.cpp	/^		const char_t* _cur_lexeme_pos;$/;"	m	class:xpath_lexer	file:
_data	include/pugixml.cpp	/^		} _data;$/;"	m	class:xpath_ast_node	typeref:union:xpath_ast_node::__anon5	file:
_data	include/pugixml.cpp	/^	PUGI__FN xml_node_struct* xml_text::_data() const$/;"	f	class:pugi::xml_text
_data_new	include/pugixml.cpp	/^	PUGI__FN xml_node_struct* xml_text::_data_new()$/;"	f	class:pugi::xml_text
_end	include/pugixml.cpp	/^		xpath_node* _end;$/;"	m	class:xpath_node_set_raw	file:
_eos	include/pugixml.cpp	/^		xpath_node* _eos;$/;"	m	class:xpath_node_set_raw	file:
_error_handler	include/pugixml.cpp	/^		jmp_buf _error_handler;$/;"	m	struct:xpath_parser	file:
_left	include/pugixml.cpp	/^		xpath_ast_node* _left;$/;"	m	class:xpath_ast_node	file:
_lexer	include/pugixml.cpp	/^		xpath_lexer _lexer;$/;"	m	struct:xpath_parser	file:
_next	include/pugixml.cpp	/^		xpath_ast_node* _next;$/;"	m	class:xpath_ast_node	file:
_query	include/pugixml.cpp	/^		const char_t* _query;$/;"	m	struct:xpath_parser	file:
_result	include/pugixml.cpp	/^		xpath_parse_result* _result;$/;"	m	struct:xpath_parser	file:
_rettype	include/pugixml.cpp	/^		char _rettype;$/;"	m	class:xpath_ast_node	file:
_right	include/pugixml.cpp	/^		xpath_ast_node* _right;$/;"	m	class:xpath_ast_node	file:
_root	include/pugixml.cpp	/^		xml_memory_page* _root;$/;"	m	struct:xml_allocator	file:
_root	include/pugixml.cpp	/^		xpath_memory_block* _root;$/;"	m	class:xpath_allocator	file:
_root_size	include/pugixml.cpp	/^		size_t _root_size;$/;"	m	class:xpath_allocator	file:
_state	include/pugixml.cpp	/^		xpath_allocator _state;$/;"	m	struct:xpath_allocator_capture	file:
_target	include/pugixml.cpp	/^		xpath_allocator* _target;$/;"	m	struct:xpath_allocator_capture	file:
_test	include/pugixml.cpp	/^		char _test;$/;"	m	class:xpath_ast_node	file:
_type	include/pugixml.cpp	/^		char _type;$/;"	m	class:xpath_ast_node	file:
_type	include/pugixml.cpp	/^		xpath_node_set::type_t _type;$/;"	m	class:xpath_node_set_raw	file:
_uses_heap	include/pugixml.cpp	/^		bool _uses_heap;$/;"	m	class:xpath_string	file:
_variables	include/pugixml.cpp	/^		xpath_variable_set* _variables;$/;"	m	struct:xpath_parser	file:
add	include/pugixml.cpp	/^	PUGI__FN xpath_variable* xpath_variable_set::add(const char_t* name, xpath_value_type type)$/;"	f	class:pugi::xpath_variable_set
alloc	include/pugixml.cpp	/^		xml_allocator alloc;$/;"	m	struct:xml_parser	file:
alloc	include/pugixml.cpp	/^		xpath_allocator alloc;$/;"	m	struct:xpath_query_impl	file:
alloc_node	include/pugixml.cpp	/^		void* alloc_node()$/;"	f	struct:xpath_parser
alloc_string	include/pugixml.cpp	/^		const char_t* alloc_string(const xpath_lexer_string& value)$/;"	f	struct:xpath_parser
allocate	include/pugixml.cpp	/^		static allocation_function allocate;$/;"	m	struct:xml_memory_management_function_storage	file:
allocate	include/pugixml.cpp	/^		void* allocate(size_t size)$/;"	f	class:xpath_allocator
allocate	include/pugixml.cpp	/^	template <typename T> allocation_function xml_memory_management_function_storage<T>::allocate = default_allocate;$/;"	m	class:xml_memory_management_function_storage	file:
allocate_attribute	include/pugixml.cpp	/^	inline xml_attribute_struct* allocate_attribute(xml_allocator& alloc)$/;"	f
allocate_memory	include/pugixml.cpp	/^		void* allocate_memory(size_t size, xml_memory_page*& out_page)$/;"	f	struct:xml_allocator
allocate_memory_oob	include/pugixml.cpp	/^	PUGI__FN_NO_INLINE void* xml_allocator::allocate_memory_oob(size_t size, xml_memory_page*& out_page)$/;"	f	class:xml_allocator
allocate_node	include/pugixml.cpp	/^	inline xml_node_struct* allocate_node(xml_allocator& alloc, xml_node_type type)$/;"	f
allocate_nothrow	include/pugixml.cpp	/^		void* allocate_nothrow(size_t size)$/;"	f	class:xpath_allocator
allocate_page	include/pugixml.cpp	/^		xml_memory_page* allocate_page(size_t data_size)$/;"	f	struct:xml_allocator
allocate_string	include/pugixml.cpp	/^		char_t* allocate_string(size_t length)$/;"	f	struct:xml_allocator
allocator	include/pugixml.cpp	/^		xml_allocator* allocator;$/;"	m	struct:xml_memory_page	file:
allow_insert_child	include/pugixml.cpp	/^	inline bool allow_insert_child(xml_node_type parent, xml_node_type child)$/;"	f
any	include/pugixml.cpp	/^		static value_type any(value_type result, uint32_t ch)$/;"	f	struct:utf16_writer
any	include/pugixml.cpp	/^		static value_type any(value_type result, uint32_t ch)$/;"	f	struct:utf32_writer
any	include/pugixml.cpp	/^		static value_type any(value_type result, uint32_t ch)$/;"	f	struct:utf8_writer
append	include/pugixml.cpp	/^		void append(const xpath_node* begin_, const xpath_node* end_, xpath_allocator* alloc)$/;"	f	class:xpath_node_set_raw
append	include/pugixml.cpp	/^		void append(const xpath_string& o, xpath_allocator* alloc)$/;"	f	class:xpath_string
append_attribute	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::append_attribute(const char_t* name_)$/;"	f	class:pugi::xml_node
append_attribute_ll	include/pugixml.cpp	/^	PUGI__FN_NO_INLINE xml_attribute_struct* append_attribute_ll(xml_node_struct* node, xml_allocator& alloc)$/;"	f
append_child	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::append_child(const char_t* name_)$/;"	f	class:pugi::xml_node
append_child	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::append_child(xml_node_type type_)$/;"	f	class:pugi::xml_node
append_copy	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::append_copy(const xml_attribute& proto)$/;"	f	class:pugi::xml_node
append_copy	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::append_copy(const xml_node& proto)$/;"	f	class:pugi::xml_node
append_node	include/pugixml.cpp	/^	PUGI__FN_NO_INLINE xml_node_struct* append_node(xml_node_struct* node, xml_allocator& alloc, xml_node_type type = node_element)$/;"	f
apply_predicate	include/pugixml.cpp	/^		void apply_predicate(xpath_node_set_raw& ns, size_t first, xpath_ast_node* expr, const xpath_stack& stack)$/;"	f	class:xpath_ast_node	file:
apply_predicates	include/pugixml.cpp	/^		void apply_predicates(xpath_node_set_raw& ns, size_t first, const xpath_stack& stack)$/;"	f	class:xpath_ast_node	file:
as_bool	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::as_bool(bool def) const$/;"	f	class:pugi::xml_attribute
as_bool	include/pugixml.cpp	/^	PUGI__FN bool xml_text::as_bool(bool def) const$/;"	f	class:pugi::xml_text
as_double	include/pugixml.cpp	/^	PUGI__FN double xml_attribute::as_double(double def) const$/;"	f	class:pugi::xml_attribute
as_double	include/pugixml.cpp	/^	PUGI__FN double xml_text::as_double(double def) const$/;"	f	class:pugi::xml_text
as_float	include/pugixml.cpp	/^	PUGI__FN float xml_attribute::as_float(float def) const$/;"	f	class:pugi::xml_attribute
as_float	include/pugixml.cpp	/^	PUGI__FN float xml_text::as_float(float def) const$/;"	f	class:pugi::xml_text
as_int	include/pugixml.cpp	/^	PUGI__FN int xml_attribute::as_int(int def) const$/;"	f	class:pugi::xml_attribute
as_int	include/pugixml.cpp	/^	PUGI__FN int xml_text::as_int(int def) const$/;"	f	class:pugi::xml_text
as_string	include/pugixml.cpp	/^	PUGI__FN const char_t* xml_attribute::as_string(const char_t* def) const$/;"	f	class:pugi::xml_attribute
as_string	include/pugixml.cpp	/^	PUGI__FN const char_t* xml_text::as_string(const char_t* def) const$/;"	f	class:pugi::xml_text
as_uint	include/pugixml.cpp	/^	PUGI__FN unsigned int xml_attribute::as_uint(unsigned int def) const$/;"	f	class:pugi::xml_attribute
as_uint	include/pugixml.cpp	/^	PUGI__FN unsigned int xml_text::as_uint(unsigned int def) const$/;"	f	class:pugi::xml_text
as_utf8	include/pugixml.cpp	/^	PUGI__FN std::string PUGIXML_FUNCTION as_utf8(const std::basic_string<wchar_t>& str)$/;"	f	namespace:pugi
as_utf8	include/pugixml.cpp	/^	PUGI__FN std::string PUGIXML_FUNCTION as_utf8(const wchar_t* str)$/;"	f	namespace:pugi
as_utf8_begin	include/pugixml.cpp	/^	PUGI__FN size_t as_utf8_begin(const wchar_t* str, size_t length)$/;"	f
as_utf8_end	include/pugixml.cpp	/^	PUGI__FN void as_utf8_end(char* buffer, size_t size, const wchar_t* str, size_t length)$/;"	f
as_utf8_impl	include/pugixml.cpp	/^	PUGI__FN std::string as_utf8_impl(const wchar_t* str, size_t length)$/;"	f
as_wide	include/pugixml.cpp	/^	PUGI__FN std::basic_string<wchar_t> PUGIXML_FUNCTION as_wide(const char* str)$/;"	f	namespace:pugi
as_wide	include/pugixml.cpp	/^	PUGI__FN std::basic_string<wchar_t> PUGIXML_FUNCTION as_wide(const std::string& str)$/;"	f	namespace:pugi
as_wide_impl	include/pugixml.cpp	/^	PUGI__FN std::basic_string<wchar_t> as_wide_impl(const char* str, size_t size)$/;"	f
ast_filter	include/pugixml.cpp	/^		ast_filter,						\/\/ select * from left where right$/;"	e	enum:ast_type_t	file:
ast_filter_posinv	include/pugixml.cpp	/^		ast_filter_posinv,				\/\/ select * from left where right; proximity position invariant$/;"	e	enum:ast_type_t	file:
ast_func_boolean	include/pugixml.cpp	/^		ast_func_boolean,				\/\/ boolean(left)$/;"	e	enum:ast_type_t	file:
ast_func_ceiling	include/pugixml.cpp	/^		ast_func_ceiling,				\/\/ ceiling(left)$/;"	e	enum:ast_type_t	file:
ast_func_concat	include/pugixml.cpp	/^		ast_func_concat,				\/\/ concat(left, right, siblings)$/;"	e	enum:ast_type_t	file:
ast_func_contains	include/pugixml.cpp	/^		ast_func_contains,				\/\/ contains(left, right)$/;"	e	enum:ast_type_t	file:
ast_func_count	include/pugixml.cpp	/^		ast_func_count,					\/\/ count(left)$/;"	e	enum:ast_type_t	file:
ast_func_false	include/pugixml.cpp	/^		ast_func_false,					\/\/ false()$/;"	e	enum:ast_type_t	file:
ast_func_floor	include/pugixml.cpp	/^		ast_func_floor,					\/\/ floor(left)$/;"	e	enum:ast_type_t	file:
ast_func_id	include/pugixml.cpp	/^		ast_func_id,					\/\/ id(left)$/;"	e	enum:ast_type_t	file:
ast_func_lang	include/pugixml.cpp	/^		ast_func_lang,					\/\/ lang(left)$/;"	e	enum:ast_type_t	file:
ast_func_last	include/pugixml.cpp	/^		ast_func_last,					\/\/ last()$/;"	e	enum:ast_type_t	file:
ast_func_local_name_0	include/pugixml.cpp	/^		ast_func_local_name_0,			\/\/ local-name()$/;"	e	enum:ast_type_t	file:
ast_func_local_name_1	include/pugixml.cpp	/^		ast_func_local_name_1,			\/\/ local-name(left)$/;"	e	enum:ast_type_t	file:
ast_func_name_0	include/pugixml.cpp	/^		ast_func_name_0,				\/\/ name()$/;"	e	enum:ast_type_t	file:
ast_func_name_1	include/pugixml.cpp	/^		ast_func_name_1,				\/\/ name(left)$/;"	e	enum:ast_type_t	file:
ast_func_namespace_uri_0	include/pugixml.cpp	/^		ast_func_namespace_uri_0,		\/\/ namespace-uri()$/;"	e	enum:ast_type_t	file:
ast_func_namespace_uri_1	include/pugixml.cpp	/^		ast_func_namespace_uri_1,		\/\/ namespace-uri(left)$/;"	e	enum:ast_type_t	file:
ast_func_normalize_space_0	include/pugixml.cpp	/^		ast_func_normalize_space_0,		\/\/ normalize-space()$/;"	e	enum:ast_type_t	file:
ast_func_normalize_space_1	include/pugixml.cpp	/^		ast_func_normalize_space_1,		\/\/ normalize-space(left)$/;"	e	enum:ast_type_t	file:
ast_func_not	include/pugixml.cpp	/^		ast_func_not,					\/\/ not(left)$/;"	e	enum:ast_type_t	file:
ast_func_number_0	include/pugixml.cpp	/^		ast_func_number_0,				\/\/ number()$/;"	e	enum:ast_type_t	file:
ast_func_number_1	include/pugixml.cpp	/^		ast_func_number_1,				\/\/ number(left)$/;"	e	enum:ast_type_t	file:
ast_func_position	include/pugixml.cpp	/^		ast_func_position,				\/\/ position()$/;"	e	enum:ast_type_t	file:
ast_func_round	include/pugixml.cpp	/^		ast_func_round,					\/\/ round(left)$/;"	e	enum:ast_type_t	file:
ast_func_starts_with	include/pugixml.cpp	/^		ast_func_starts_with,			\/\/ starts_with(left, right)$/;"	e	enum:ast_type_t	file:
ast_func_string_0	include/pugixml.cpp	/^		ast_func_string_0,				\/\/ string()$/;"	e	enum:ast_type_t	file:
ast_func_string_1	include/pugixml.cpp	/^		ast_func_string_1,				\/\/ string(left)$/;"	e	enum:ast_type_t	file:
ast_func_string_length_0	include/pugixml.cpp	/^		ast_func_string_length_0,		\/\/ string-length()$/;"	e	enum:ast_type_t	file:
ast_func_string_length_1	include/pugixml.cpp	/^		ast_func_string_length_1,		\/\/ string-length(left)$/;"	e	enum:ast_type_t	file:
ast_func_substring_2	include/pugixml.cpp	/^		ast_func_substring_2,			\/\/ substring(left, right)$/;"	e	enum:ast_type_t	file:
ast_func_substring_3	include/pugixml.cpp	/^		ast_func_substring_3,			\/\/ substring(left, right, third)$/;"	e	enum:ast_type_t	file:
ast_func_substring_after	include/pugixml.cpp	/^		ast_func_substring_after,		\/\/ substring-after(left, right)$/;"	e	enum:ast_type_t	file:
ast_func_substring_before	include/pugixml.cpp	/^		ast_func_substring_before,		\/\/ substring-before(left, right)$/;"	e	enum:ast_type_t	file:
ast_func_sum	include/pugixml.cpp	/^		ast_func_sum,					\/\/ sum(left)$/;"	e	enum:ast_type_t	file:
ast_func_translate	include/pugixml.cpp	/^		ast_func_translate,				\/\/ translate(left, right, third)$/;"	e	enum:ast_type_t	file:
ast_func_true	include/pugixml.cpp	/^		ast_func_true,					\/\/ true()$/;"	e	enum:ast_type_t	file:
ast_number_constant	include/pugixml.cpp	/^		ast_number_constant,			\/\/ number constant$/;"	e	enum:ast_type_t	file:
ast_op_add	include/pugixml.cpp	/^		ast_op_add,						\/\/ left + right$/;"	e	enum:ast_type_t	file:
ast_op_and	include/pugixml.cpp	/^		ast_op_and,						\/\/ left and right$/;"	e	enum:ast_type_t	file:
ast_op_divide	include/pugixml.cpp	/^		ast_op_divide,					\/\/ left \/ right$/;"	e	enum:ast_type_t	file:
ast_op_equal	include/pugixml.cpp	/^		ast_op_equal,					\/\/ left = right$/;"	e	enum:ast_type_t	file:
ast_op_greater	include/pugixml.cpp	/^		ast_op_greater,					\/\/ left > right$/;"	e	enum:ast_type_t	file:
ast_op_greater_or_equal	include/pugixml.cpp	/^		ast_op_greater_or_equal,		\/\/ left >= right$/;"	e	enum:ast_type_t	file:
ast_op_less	include/pugixml.cpp	/^		ast_op_less,					\/\/ left < right$/;"	e	enum:ast_type_t	file:
ast_op_less_or_equal	include/pugixml.cpp	/^		ast_op_less_or_equal,			\/\/ left <= right$/;"	e	enum:ast_type_t	file:
ast_op_mod	include/pugixml.cpp	/^		ast_op_mod,						\/\/ left % right$/;"	e	enum:ast_type_t	file:
ast_op_multiply	include/pugixml.cpp	/^		ast_op_multiply,				\/\/ left * right$/;"	e	enum:ast_type_t	file:
ast_op_negate	include/pugixml.cpp	/^		ast_op_negate,					\/\/ left - right$/;"	e	enum:ast_type_t	file:
ast_op_not_equal	include/pugixml.cpp	/^		ast_op_not_equal,				\/\/ left != right$/;"	e	enum:ast_type_t	file:
ast_op_or	include/pugixml.cpp	/^		ast_op_or,						\/\/ left or right$/;"	e	enum:ast_type_t	file:
ast_op_subtract	include/pugixml.cpp	/^		ast_op_subtract,				\/\/ left - right$/;"	e	enum:ast_type_t	file:
ast_op_union	include/pugixml.cpp	/^		ast_op_union,					\/\/ left | right$/;"	e	enum:ast_type_t	file:
ast_predicate	include/pugixml.cpp	/^		ast_predicate,					\/\/ apply predicate to set; next points to next predicate$/;"	e	enum:ast_type_t	file:
ast_step	include/pugixml.cpp	/^		ast_step,						\/\/ process set left with step$/;"	e	enum:ast_type_t	file:
ast_step_root	include/pugixml.cpp	/^		ast_step_root					\/\/ select root node$/;"	e	enum:ast_type_t	file:
ast_string_constant	include/pugixml.cpp	/^		ast_string_constant,			\/\/ string constant$/;"	e	enum:ast_type_t	file:
ast_type_t	include/pugixml.cpp	/^	enum ast_type_t$/;"	g	file:
ast_variable	include/pugixml.cpp	/^		ast_variable,					\/\/ variable$/;"	e	enum:ast_type_t	file:
attribute	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::attribute(const char_t* name_) const$/;"	f	class:pugi::xml_node
attribute	include/pugixml.cpp	/^	PUGI__FN xml_attribute xpath_node::attribute() const$/;"	f	class:pugi::xpath_node
attributes	include/pugixml.cpp	/^	PUGI__FN xml_object_range<xml_attribute_iterator> xml_node::attributes() const$/;"	f	class:pugi::xml_node
attributes_begin	include/pugixml.cpp	/^	PUGI__FN xml_node::attribute_iterator xml_node::attributes_begin() const$/;"	f	class:pugi::xml_node
attributes_end	include/pugixml.cpp	/^	PUGI__FN xml_node::attribute_iterator xml_node::attributes_end() const$/;"	f	class:pugi::xml_node
axis	include/pugixml.cpp	/^		static const axis_t axis;$/;"	m	struct:axis_to_type	file:
axis	include/pugixml.cpp	/^	template <axis_t N> const axis_t axis_to_type<N>::axis = N;$/;"	m	class:axis_to_type	file:
axis_ancestor	include/pugixml.cpp	/^		axis_ancestor,$/;"	e	enum:axis_t	file:
axis_ancestor_or_self	include/pugixml.cpp	/^		axis_ancestor_or_self,$/;"	e	enum:axis_t	file:
axis_attribute	include/pugixml.cpp	/^		axis_attribute,$/;"	e	enum:axis_t	file:
axis_child	include/pugixml.cpp	/^		axis_child,$/;"	e	enum:axis_t	file:
axis_descendant	include/pugixml.cpp	/^		axis_descendant,$/;"	e	enum:axis_t	file:
axis_descendant_or_self	include/pugixml.cpp	/^		axis_descendant_or_self,$/;"	e	enum:axis_t	file:
axis_following	include/pugixml.cpp	/^		axis_following,$/;"	e	enum:axis_t	file:
axis_following_sibling	include/pugixml.cpp	/^		axis_following_sibling,$/;"	e	enum:axis_t	file:
axis_namespace	include/pugixml.cpp	/^		axis_namespace,$/;"	e	enum:axis_t	file:
axis_parent	include/pugixml.cpp	/^		axis_parent,$/;"	e	enum:axis_t	file:
axis_preceding	include/pugixml.cpp	/^		axis_preceding,$/;"	e	enum:axis_t	file:
axis_preceding_sibling	include/pugixml.cpp	/^		axis_preceding_sibling,$/;"	e	enum:axis_t	file:
axis_self	include/pugixml.cpp	/^		axis_self$/;"	e	enum:axis_t	file:
axis_t	include/pugixml.cpp	/^	enum axis_t$/;"	g	file:
axis_to_type	include/pugixml.cpp	/^	template <axis_t N> struct axis_to_type$/;"	s	file:
begin	include/pugixml.cpp	/^		const char_t* begin;$/;"	m	struct:xpath_lexer_string	file:
begin	include/pugixml.cpp	/^		xpath_node* begin() const$/;"	f	class:xpath_node_set_raw
begin	include/pugixml.cpp	/^	PUGI__FN bool xml_tree_walker::begin(xml_node&)$/;"	f	class:pugi::xml_tree_walker
begin	include/pugixml.cpp	/^	PUGI__FN xml_node::iterator xml_node::begin() const$/;"	f	class:pugi::xml_node
begin	include/pugixml.cpp	/^	PUGI__FN xpath_node_set::const_iterator xpath_node_set::begin() const$/;"	f	class:pugi::xpath_node_set
block	include/pugixml.cpp	/^		xpath_memory_block block;$/;"	m	struct:xpath_query_impl	file:
blocks	include/pugixml.cpp	/^		xpath_memory_block blocks[2];$/;"	m	struct:xpath_stack_data	file:
bufcapacity	include/pugixml.cpp	/^			bufcapacity = bufcapacitybytes \/ (sizeof(char_t) + 4)$/;"	e	enum:xml_buffered_writer::__anon3	file:
bufcapacitybytes	include/pugixml.cpp	/^			bufcapacitybytes =$/;"	e	enum:xml_buffered_writer::__anon3	file:
buffer	include/pugixml.cpp	/^		char_t buffer[bufcapacity];$/;"	m	class:xml_buffered_writer	file:
buffer	include/pugixml.cpp	/^		const char_t* buffer;$/;"	m	struct:xml_document_struct	file:
buffer_holder	include/pugixml.cpp	/^		buffer_holder(void* data_, void (*deleter_)(void*)): data(data_), deleter(deleter_)$/;"	f	struct:buffer_holder
buffer_holder	include/pugixml.cpp	/^	struct buffer_holder$/;"	s	file:
bufsize	include/pugixml.cpp	/^		size_t bufsize;$/;"	m	class:xml_buffered_writer	file:
busy_size	include/pugixml.cpp	/^		size_t busy_size;$/;"	m	struct:xml_memory_page	file:
c_str	include/pugixml.cpp	/^		const char_t* c_str() const$/;"	f	class:xpath_string
chartype_t	include/pugixml.cpp	/^	enum chartype_t$/;"	g	file:
chartype_table	include/pugixml.cpp	/^	static const unsigned char chartype_table[256] =$/;"	v	file:
chartypex_t	include/pugixml.cpp	/^	enum chartypex_t$/;"	g	file:
chartypex_table	include/pugixml.cpp	/^	static const unsigned char chartypex_table[256] =$/;"	v	file:
check_string_to_number_format	include/pugixml.cpp	/^	PUGI__FN bool check_string_to_number_format(const char_t* string)$/;"	f
child	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::child(const char_t* name_) const$/;"	f	class:pugi::xml_node
child_value	include/pugixml.cpp	/^	PUGI__FN const char_t* xml_node::child_value() const$/;"	f	class:pugi::xml_node
child_value	include/pugixml.cpp	/^	PUGI__FN const char_t* xml_node::child_value(const char_t* name_) const$/;"	f	class:pugi::xml_node
children	include/pugixml.cpp	/^	PUGI__FN xml_object_range<xml_named_node_iterator> xml_node::children(const char_t* name_) const$/;"	f	class:pugi::xml_node
children	include/pugixml.cpp	/^	PUGI__FN xml_object_range<xml_node_iterator> xml_node::children() const$/;"	f	class:pugi::xml_node
compare_eq	include/pugixml.cpp	/^		template <class Comp> static bool compare_eq(xpath_ast_node* lhs, xpath_ast_node* rhs, const xpath_context& c, const xpath_stack& stack, const Comp& comp)$/;"	f	class:xpath_ast_node	file:
compare_rel	include/pugixml.cpp	/^		template <class Comp> static bool compare_rel(xpath_ast_node* lhs, xpath_ast_node* rhs, const xpath_context& c, const xpath_stack& stack, const Comp& comp)$/;"	f	class:xpath_ast_node	file:
construct	include/pugixml.cpp	/^		static xml_memory_page* construct(void* memory)$/;"	f	struct:xml_memory_page
contents	include/pugixml.cpp	/^		const xpath_lexer_string& contents() const$/;"	f	class:xpath_lexer
convert_buffer	include/pugixml.cpp	/^	PUGI__FN bool convert_buffer(char_t*& out_buffer, size_t& out_length, xml_encoding encoding, const void* contents, size_t size, bool is_mutable)$/;"	f
convert_buffer	include/pugixml.cpp	/^	PUGI__FN size_t convert_buffer(char_t* \/* r_char *\/, uint8_t* r_u8, uint16_t* r_u16, uint32_t* r_u32, const char_t* data, size_t length, xml_encoding encoding)$/;"	f
convert_buffer	include/pugixml.cpp	/^	PUGI__FN size_t convert_buffer(char_t* r_char, uint8_t* r_u8, uint16_t* r_u16, uint32_t* r_u32, const char_t* data, size_t length, xml_encoding encoding)$/;"	f
convert_buffer_endian_swap	include/pugixml.cpp	/^	PUGI__FN bool convert_buffer_endian_swap(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size, bool is_mutable)$/;"	f
convert_buffer_latin1	include/pugixml.cpp	/^	PUGI__FN bool convert_buffer_latin1(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size)$/;"	f
convert_buffer_latin1	include/pugixml.cpp	/^	PUGI__FN bool convert_buffer_latin1(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size, bool is_mutable)$/;"	f
convert_buffer_utf16	include/pugixml.cpp	/^	template <typename opt_swap> PUGI__FN bool convert_buffer_utf16(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size, opt_swap)$/;"	f
convert_buffer_utf32	include/pugixml.cpp	/^	template <typename opt_swap> PUGI__FN bool convert_buffer_utf32(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size, opt_swap)$/;"	f
convert_buffer_utf8	include/pugixml.cpp	/^	PUGI__FN bool convert_buffer_utf8(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size)$/;"	f
convert_number_to_boolean	include/pugixml.cpp	/^	PUGI__FN bool convert_number_to_boolean(double value)$/;"	f
convert_number_to_mantissa_exponent	include/pugixml.cpp	/^	PUGI__FN void convert_number_to_mantissa_exponent(double value, char* buffer, size_t buffer_size, char** out_mantissa, int* out_exponent)$/;"	f
convert_number_to_string	include/pugixml.cpp	/^	PUGI__FN xpath_string convert_number_to_string(double value, xpath_allocator* alloc)$/;"	f
convert_number_to_string_special	include/pugixml.cpp	/^	PUGI__FN const char_t* convert_number_to_string_special(double value)$/;"	f
convert_path_heap	include/pugixml.cpp	/^	PUGI__FN char* convert_path_heap(const wchar_t* str)$/;"	f
convert_string_to_number	include/pugixml.cpp	/^	PUGI__FN bool convert_string_to_number(const char_t* begin, const char_t* end, double* out_result)$/;"	f
convert_string_to_number	include/pugixml.cpp	/^	PUGI__FN double convert_string_to_number(const char_t* string)$/;"	f
convert_utf_endian_swap	include/pugixml.cpp	/^	template <typename T> PUGI__FN void convert_utf_endian_swap(T* result, const T* data, size_t length)$/;"	f
convert_wchar_endian_swap	include/pugixml.cpp	/^	PUGI__FN void convert_wchar_endian_swap(wchar_t* result, const wchar_t* data, size_t length)$/;"	f
copy_backwards	include/pugixml.cpp	/^	template <typename I> void copy_backwards(I begin, I end, I target)$/;"	f
counter	include/pugixml.cpp	/^		typedef utf16_counter counter;$/;"	t	struct:wchar_selector	file:
counter	include/pugixml.cpp	/^		typedef utf32_counter counter;$/;"	t	struct:wchar_selector	file:
create	include/pugixml.cpp	/^		static xml_stream_chunk* create()$/;"	f	struct:xml_stream_chunk
create	include/pugixml.cpp	/^		static xpath_query_impl* create()$/;"	f	struct:xpath_query_impl
create	include/pugixml.cpp	/^	PUGI__FN void xml_document::create()$/;"	f	class:pugi::xml_document
ct_parse_attr	include/pugixml.cpp	/^		ct_parse_attr = 2,		\/\/ \\0, &, \\r, ', "$/;"	e	enum:chartype_t	file:
ct_parse_attr_ws	include/pugixml.cpp	/^		ct_parse_attr_ws = 4,	\/\/ \\0, &, \\r, ', ", \\n, tab$/;"	e	enum:chartype_t	file:
ct_parse_cdata	include/pugixml.cpp	/^		ct_parse_cdata = 16,	\/\/ \\0, ], >, \\r$/;"	e	enum:chartype_t	file:
ct_parse_comment	include/pugixml.cpp	/^		ct_parse_comment = 32,	\/\/ \\0, -, >, \\r$/;"	e	enum:chartype_t	file:
ct_parse_pcdata	include/pugixml.cpp	/^		ct_parse_pcdata = 1,	\/\/ \\0, &, \\r, <$/;"	e	enum:chartype_t	file:
ct_space	include/pugixml.cpp	/^		ct_space = 8,			\/\/ \\r, \\n, space, tab$/;"	e	enum:chartype_t	file:
ct_start_symbol	include/pugixml.cpp	/^		ct_start_symbol = 128	\/\/ Any symbol > 127, a-z, A-Z, _, :$/;"	e	enum:chartype_t	file:
ct_symbol	include/pugixml.cpp	/^		ct_symbol = 64,			\/\/ Any symbol > 127, a-z, A-Z, 0-9, _, :, -, .$/;"	e	enum:chartype_t	file:
ctx_digit	include/pugixml.cpp	/^		ctx_digit = 8,			  \/\/ 0-9$/;"	e	enum:chartypex_t	file:
ctx_special_attr	include/pugixml.cpp	/^		ctx_special_attr = 2,     \/\/ Any symbol >= 0 and < 32 (except \\t), &, <, >, "$/;"	e	enum:chartypex_t	file:
ctx_special_pcdata	include/pugixml.cpp	/^		ctx_special_pcdata = 1,   \/\/ Any symbol >= 0 and < 32 (except \\t, \\r, \\n), &, <, >$/;"	e	enum:chartypex_t	file:
ctx_start_symbol	include/pugixml.cpp	/^		ctx_start_symbol = 4,	  \/\/ Any symbol > 127, a-z, A-Z, _$/;"	e	enum:chartypex_t	file:
ctx_symbol	include/pugixml.cpp	/^		ctx_symbol = 16			  \/\/ Any symbol > 127, a-z, A-Z, 0-9, _, -, .$/;"	e	enum:chartypex_t	file:
current	include/pugixml.cpp	/^		lexeme_t current() const$/;"	f	class:xpath_lexer
current_pos	include/pugixml.cpp	/^		const char_t* current_pos() const$/;"	f	class:xpath_lexer
data	include/pugixml.cpp	/^		T data[xml_memory_page_size \/ sizeof(T)];$/;"	m	struct:xml_stream_chunk	file:
data	include/pugixml.cpp	/^		char data[$/;"	m	struct:xpath_memory_block	file:
data	include/pugixml.cpp	/^		char data[1];$/;"	m	struct:xml_memory_page	file:
data	include/pugixml.cpp	/^		char_t* data(xpath_allocator* alloc)$/;"	f	class:xpath_string
data	include/pugixml.cpp	/^		void* data;$/;"	m	struct:buffer_holder	file:
data	include/pugixml.cpp	/^	PUGI__FN xml_node xml_text::data() const$/;"	f	class:pugi::xml_text
data_char	include/pugixml.cpp	/^			char_t data_char[bufcapacity];$/;"	m	union:xml_buffered_writer::__anon4	file:
data_u16	include/pugixml.cpp	/^			uint16_t data_u16[2 * bufcapacity];$/;"	m	union:xml_buffered_writer::__anon4	file:
data_u32	include/pugixml.cpp	/^			uint32_t data_u32[bufcapacity];$/;"	m	union:xml_buffered_writer::__anon4	file:
data_u8	include/pugixml.cpp	/^			uint8_t data_u8[4 * bufcapacity];$/;"	m	union:xml_buffered_writer::__anon4	file:
deallocate	include/pugixml.cpp	/^		static deallocation_function deallocate;$/;"	m	struct:xml_memory_management_function_storage	file:
deallocate	include/pugixml.cpp	/^	template <typename T> deallocation_function xml_memory_management_function_storage<T>::deallocate = default_deallocate;$/;"	m	class:xml_memory_management_function_storage	file:
deallocate_memory	include/pugixml.cpp	/^		void deallocate_memory(void* ptr, size_t size, xml_memory_page* page)$/;"	f	struct:xml_allocator
deallocate_page	include/pugixml.cpp	/^		static void deallocate_page(xml_memory_page* page)$/;"	f	struct:xml_allocator
deallocate_string	include/pugixml.cpp	/^		void deallocate_string(char_t* string)$/;"	f	struct:xml_allocator
decode_latin1_block	include/pugixml.cpp	/^		static inline typename Traits::value_type decode_latin1_block(const uint8_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
decode_utf16_block	include/pugixml.cpp	/^		static inline typename Traits::value_type decode_utf16_block(const uint16_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
decode_utf32_block	include/pugixml.cpp	/^		static inline typename Traits::value_type decode_utf32_block(const uint32_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
decode_utf8_block	include/pugixml.cpp	/^		static inline typename Traits::value_type decode_utf8_block(const uint8_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
decode_wchar_block	include/pugixml.cpp	/^		static inline typename Traits::value_type decode_wchar_block(const wchar_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
decode_wchar_block_impl	include/pugixml.cpp	/^		static inline typename Traits::value_type decode_wchar_block_impl(const uint16_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
decode_wchar_block_impl	include/pugixml.cpp	/^		static inline typename Traits::value_type decode_wchar_block_impl(const uint32_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
default_allocate	include/pugixml.cpp	/^	PUGI__FN void* default_allocate(size_t size)$/;"	f
default_deallocate	include/pugixml.cpp	/^	PUGI__FN void default_deallocate(void* ptr)$/;"	f
delete_xpath_variable	include/pugixml.cpp	/^	PUGI__FN void delete_xpath_variable(xpath_value_type type, xpath_variable* var)$/;"	f
delete_xpath_variable	include/pugixml.cpp	/^	template <typename T> PUGI__FN void delete_xpath_variable(T* var)$/;"	f
deleter	include/pugixml.cpp	/^		void (*deleter)(void*);$/;"	m	struct:buffer_holder	file:
depth	include/pugixml.cpp	/^	PUGI__FN int xml_tree_walker::depth() const$/;"	f	class:pugi::xml_tree_walker
description	include/pugixml.cpp	/^	PUGI__FN const char* xml_parse_result::description() const$/;"	f	class:pugi::xml_parse_result
description	include/pugixml.cpp	/^	PUGI__FN const char* xpath_parse_result::description() const$/;"	f	class:pugi::xpath_parse_result
destroy	include/pugixml.cpp	/^		static void destroy(void* ptr)$/;"	f	struct:xml_stream_chunk
destroy	include/pugixml.cpp	/^		static void destroy(void* ptr)$/;"	f	struct:xpath_query_impl
destroy	include/pugixml.cpp	/^	PUGI__FN void xml_document::destroy()$/;"	f	class:pugi::xml_document
destroy_attribute	include/pugixml.cpp	/^	inline void destroy_attribute(xml_attribute_struct* a, xml_allocator& alloc)$/;"	f
destroy_node	include/pugixml.cpp	/^	inline void destroy_node(xml_node_struct* n, xml_allocator& alloc)$/;"	f
document_element	include/pugixml.cpp	/^	PUGI__FN xml_node xml_document::document_element() const$/;"	f	class:pugi::xml_document
document_order	include/pugixml.cpp	/^	PUGI__FN const void* document_order(const xpath_node& xnode)$/;"	f
document_order_comparator	include/pugixml.cpp	/^	struct document_order_comparator$/;"	s	file:
dummy_node_set	include/pugixml.cpp	/^	static const xpath_node_set dummy_node_set;$/;"	v	file:
duplicate_comparator	include/pugixml.cpp	/^	struct duplicate_comparator$/;"	s	file:
duplicate_string	include/pugixml.cpp	/^		static char_t* duplicate_string(const char_t* string, size_t length, xpath_allocator* alloc)$/;"	f	class:xpath_string	file:
duplicate_string	include/pugixml.cpp	/^		static char_t* duplicate_string(const char_t* string, xpath_allocator* alloc)$/;"	f	class:xpath_string	file:
empty	include/pugixml.cpp	/^		bool empty() const$/;"	f	class:xpath_node_set_raw
empty	include/pugixml.cpp	/^		bool empty() const$/;"	f	class:xpath_string
empty	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::empty() const$/;"	f	class:pugi::xml_attribute
empty	include/pugixml.cpp	/^	PUGI__FN bool xml_node::empty() const$/;"	f	class:pugi::xml_node
empty	include/pugixml.cpp	/^	PUGI__FN bool xml_text::empty() const$/;"	f	class:pugi::xml_text
empty	include/pugixml.cpp	/^	PUGI__FN bool xpath_node_set::empty() const$/;"	f	class:pugi::xpath_node_set
encoding	include/pugixml.cpp	/^		xml_encoding encoding;$/;"	m	class:xml_buffered_writer	file:
end	include/pugixml.cpp	/^		char_t* end;$/;"	m	struct:gap	file:
end	include/pugixml.cpp	/^		const char_t* end;$/;"	m	struct:xpath_lexer_string	file:
end	include/pugixml.cpp	/^		xpath_node* end() const$/;"	f	class:xpath_node_set_raw
end	include/pugixml.cpp	/^	PUGI__FN bool xml_tree_walker::end(xml_node&)$/;"	f	class:pugi::xml_tree_walker
end	include/pugixml.cpp	/^	PUGI__FN xml_node::iterator xml_node::end() const$/;"	f	class:pugi::xml_node
end	include/pugixml.cpp	/^	PUGI__FN xpath_node_set::const_iterator xpath_node_set::end() const$/;"	f	class:pugi::xpath_node_set
endian_swap	include/pugixml.cpp	/^	inline uint16_t endian_swap(uint16_t value)$/;"	f
endian_swap	include/pugixml.cpp	/^	inline uint32_t endian_swap(uint32_t value)$/;"	f
equal_to	include/pugixml.cpp	/^	struct equal_to$/;"	s	file:
error_handler	include/pugixml.cpp	/^		jmp_buf error_handler;$/;"	m	struct:xpath_stack_data	file:
error_handler	include/pugixml.cpp	/^		jmp_buf* error_handler;$/;"	m	class:xpath_allocator	file:
error_offset	include/pugixml.cpp	/^		char_t* error_offset;$/;"	m	struct:xml_parser	file:
error_status	include/pugixml.cpp	/^		xml_parse_status error_status;$/;"	m	struct:xml_parser	file:
eval_boolean	include/pugixml.cpp	/^		bool eval_boolean(const xpath_context& c, const xpath_stack& stack)$/;"	f	class:xpath_ast_node
eval_node_set	include/pugixml.cpp	/^		xpath_node_set_raw eval_node_set(const xpath_context& c, const xpath_stack& stack)$/;"	f	class:xpath_ast_node
eval_number	include/pugixml.cpp	/^		double eval_number(const xpath_context& c, const xpath_stack& stack)$/;"	f	class:xpath_ast_node
eval_string	include/pugixml.cpp	/^		xpath_string eval_string(const xpath_context& c, const xpath_stack& stack)$/;"	f	class:xpath_ast_node
eval_string_concat	include/pugixml.cpp	/^		xpath_string eval_string_concat(const xpath_context& c, const xpath_stack& stack)$/;"	f	class:xpath_ast_node
evaluate_boolean	include/pugixml.cpp	/^	PUGI__FN bool xpath_query::evaluate_boolean(const xpath_node& n) const$/;"	f	class:pugi::xpath_query
evaluate_node_set	include/pugixml.cpp	/^	PUGI__FN xpath_node_set xpath_query::evaluate_node_set(const xpath_node& n) const$/;"	f	class:pugi::xpath_query
evaluate_number	include/pugixml.cpp	/^	PUGI__FN double xpath_query::evaluate_number(const xpath_node& n) const$/;"	f	class:pugi::xpath_query
evaluate_string	include/pugixml.cpp	/^	PUGI__FN size_t xpath_query::evaluate_string(char_t* buffer, size_t capacity, const xpath_node& n) const$/;"	f	class:pugi::xpath_query
evaluate_string	include/pugixml.cpp	/^	PUGI__FN string_t xpath_query::evaluate_string(const xpath_node& n) const$/;"	f	class:pugi::xpath_query
evaluate_string_impl	include/pugixml.cpp	/^	PUGI__FN xpath_string evaluate_string_impl(xpath_query_impl* impl, const xpath_node& n, xpath_stack_data& sd)$/;"	f
find	include/pugixml.cpp	/^	PUGI__FN xpath_variable* xpath_variable_set::find(const char_t* name) const$/;"	f	class:pugi::xpath_variable_set
find_char	include/pugixml.cpp	/^	PUGI__FN const char_t* find_char(const char_t* s, char_t c)$/;"	f
find_child_by_attribute	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::find_child_by_attribute(const char_t* attr_name, const char_t* attr_value) const$/;"	f	class:pugi::xml_node
find_child_by_attribute	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::find_child_by_attribute(const char_t* name_, const char_t* attr_name, const char_t* attr_value) const$/;"	f	class:pugi::xml_node
find_substring	include/pugixml.cpp	/^	PUGI__FN const char_t* find_substring(const char_t* s, const char_t* p)$/;"	f
first	include/pugixml.cpp	/^		xpath_node first() const$/;"	f	class:xpath_node_set_raw
first	include/pugixml.cpp	/^	PUGI__FN xpath_node xpath_node_set::first() const$/;"	f	class:pugi::xpath_node_set
first_attribute	include/pugixml.cpp	/^		xml_attribute_struct*	first_attribute;		\/\/\/< First attribute$/;"	m	struct:pugi::xml_node_struct	file:
first_attribute	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::first_attribute() const$/;"	f	class:pugi::xml_node
first_child	include/pugixml.cpp	/^		xml_node_struct*		first_child;			\/\/\/< First child$/;"	m	struct:pugi::xml_node_struct	file:
first_child	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::first_child() const$/;"	f	class:pugi::xml_node
first_element_by_path	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::first_element_by_path(const char_t* path_, char_t delimiter) const$/;"	f	class:pugi::xml_node
flush	include/pugixml.cpp	/^		char_t* flush(char_t* s)$/;"	f	struct:gap
flush	include/pugixml.cpp	/^		void flush()$/;"	f	class:xml_buffered_writer
flush	include/pugixml.cpp	/^		void flush(const char_t* data, size_t size)$/;"	f	class:xml_buffered_writer
freed_size	include/pugixml.cpp	/^		size_t freed_size;$/;"	m	struct:xml_memory_page	file:
full_size	include/pugixml.cpp	/^		uint16_t full_size; \/\/ 0 if string occupies whole page$/;"	m	struct:xml_memory_string_header	file:
gap	include/pugixml.cpp	/^		gap(): end(0), size(0)$/;"	f	struct:gap
gap	include/pugixml.cpp	/^	struct gap$/;"	s	file:
gen_nan	include/pugixml.cpp	/^	PUGI__FN double gen_nan()$/;"	f
get	include/pugixml.cpp	/^	PUGI__FN const char_t* xml_text::get() const$/;"	f	class:pugi::xml_text
get	include/pugixml.cpp	/^	PUGI__FN const xpath_variable* xpath_variable_set::get(const char_t* name) const$/;"	f	class:pugi::xpath_variable_set
get	include/pugixml.cpp	/^	PUGI__FN xpath_variable* xpath_variable_set::get(const char_t* name)$/;"	f	class:pugi::xpath_variable_set
get_allocator	include/pugixml.cpp	/^	inline xml_allocator& get_allocator(const xml_node_struct* node)$/;"	f
get_boolean	include/pugixml.cpp	/^	PUGI__FN bool xpath_variable::get_boolean() const$/;"	f	class:pugi::xpath_variable
get_buffer_encoding	include/pugixml.cpp	/^	PUGI__FN xml_encoding get_buffer_encoding(xml_encoding encoding, const void* contents, size_t size)$/;"	f
get_file_size	include/pugixml.cpp	/^	PUGI__FN xml_parse_status get_file_size(FILE* file, size_t& out_result)$/;"	f
get_latin1_7bit_prefix_length	include/pugixml.cpp	/^	PUGI__FN size_t get_latin1_7bit_prefix_length(const uint8_t* data, size_t size)$/;"	f
get_memory_allocation_function	include/pugixml.cpp	/^	PUGI__FN allocation_function PUGIXML_FUNCTION get_memory_allocation_function()$/;"	f	namespace:pugi
get_memory_deallocation_function	include/pugixml.cpp	/^	PUGI__FN deallocation_function PUGIXML_FUNCTION get_memory_deallocation_function()$/;"	f	namespace:pugi
get_mutable_buffer	include/pugixml.cpp	/^	PUGI__FN bool get_mutable_buffer(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size, bool is_mutable)$/;"	f
get_node_set	include/pugixml.cpp	/^	PUGI__FN const xpath_node_set& xpath_variable::get_node_set() const$/;"	f	class:pugi::xpath_variable
get_number	include/pugixml.cpp	/^	PUGI__FN double xpath_variable::get_number() const$/;"	f	class:pugi::xpath_variable
get_strconv_attribute	include/pugixml.cpp	/^	PUGI__FN strconv_attribute_t get_strconv_attribute(unsigned int optmask)$/;"	f
get_strconv_pcdata	include/pugixml.cpp	/^	PUGI__FN strconv_pcdata_t get_strconv_pcdata(unsigned int optmask)$/;"	f
get_string	include/pugixml.cpp	/^	PUGI__FN const char_t* xpath_variable::get_string() const$/;"	f	class:pugi::xpath_variable
get_valid_length	include/pugixml.cpp	/^	PUGI__FN size_t get_valid_length(const char_t* data, size_t length)$/;"	f
get_value_bool	include/pugixml.cpp	/^	PUGI__FN bool get_value_bool(const char_t* value, bool def)$/;"	f
get_value_double	include/pugixml.cpp	/^	PUGI__FN double get_value_double(const char_t* value, double def)$/;"	f
get_value_float	include/pugixml.cpp	/^	PUGI__FN float get_value_float(const char_t* value, float def)$/;"	f
get_value_int	include/pugixml.cpp	/^	PUGI__FN int get_value_int(const char_t* value, int def)$/;"	f
get_value_uint	include/pugixml.cpp	/^	PUGI__FN unsigned int get_value_uint(const char_t* value, unsigned int def)$/;"	f
get_variable	include/pugixml.cpp	/^	PUGI__FN xpath_variable* get_variable(xpath_variable_set* set, const char_t* begin, const char_t* end)$/;"	f
get_wchar_encoding	include/pugixml.cpp	/^	PUGI__FN xml_encoding get_wchar_encoding()$/;"	f
get_write_encoding	include/pugixml.cpp	/^	PUGI__FN xml_encoding get_write_encoding(xml_encoding encoding)$/;"	f
get_write_native_encoding	include/pugixml.cpp	/^	PUGI__FN xml_encoding get_write_native_encoding()$/;"	f
guess_buffer_encoding	include/pugixml.cpp	/^	PUGI__FN xml_encoding guess_buffer_encoding(uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)$/;"	f
has_declaration	include/pugixml.cpp	/^	inline bool has_declaration(const xml_node& node)$/;"	f
hash_string	include/pugixml.cpp	/^	PUGI__FN unsigned int hash_string(const char_t* str)$/;"	f
hash_value	include/pugixml.cpp	/^	PUGI__FN size_t xml_attribute::hash_value() const$/;"	f	class:pugi::xml_attribute
hash_value	include/pugixml.cpp	/^	PUGI__FN size_t xml_node::hash_value() const$/;"	f	class:pugi::xml_node
header	include/pugixml.cpp	/^		uintptr_t header;$/;"	m	struct:pugi::xml_attribute_struct	file:
header	include/pugixml.cpp	/^		uintptr_t header;$/;"	m	struct:pugi::xml_node_struct	file:
high	include/pugixml.cpp	/^		static value_type high(value_type result, uint32_t ch)$/;"	f	struct:latin1_writer
high	include/pugixml.cpp	/^		static value_type high(value_type result, uint32_t ch)$/;"	f	struct:utf16_writer
high	include/pugixml.cpp	/^		static value_type high(value_type result, uint32_t ch)$/;"	f	struct:utf32_writer
high	include/pugixml.cpp	/^		static value_type high(value_type result, uint32_t ch)$/;"	f	struct:utf8_writer
high	include/pugixml.cpp	/^		static value_type high(value_type result, uint32_t)$/;"	f	struct:utf16_counter
high	include/pugixml.cpp	/^		static value_type high(value_type result, uint32_t)$/;"	f	struct:utf32_counter
high	include/pugixml.cpp	/^		static value_type high(value_type result, uint32_t)$/;"	f	struct:utf8_counter
insert_attribute_after	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::insert_attribute_after(const char_t* name_, const xml_attribute& attr)$/;"	f	class:pugi::xml_node
insert_attribute_before	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::insert_attribute_before(const char_t* name_, const xml_attribute& attr)$/;"	f	class:pugi::xml_node
insert_child_after	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::insert_child_after(const char_t* name_, const xml_node& node)$/;"	f	class:pugi::xml_node
insert_child_after	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::insert_child_after(xml_node_type type_, const xml_node& node)$/;"	f	class:pugi::xml_node
insert_child_before	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::insert_child_before(const char_t* name_, const xml_node& node)$/;"	f	class:pugi::xml_node
insert_child_before	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::insert_child_before(xml_node_type type_, const xml_node& node)$/;"	f	class:pugi::xml_node
insert_copy_after	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::insert_copy_after(const xml_attribute& proto, const xml_attribute& attr)$/;"	f	class:pugi::xml_node
insert_copy_after	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::insert_copy_after(const xml_node& proto, const xml_node& node)$/;"	f	class:pugi::xml_node
insert_copy_before	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::insert_copy_before(const xml_attribute& proto, const xml_attribute& attr)$/;"	f	class:pugi::xml_node
insert_copy_before	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::insert_copy_before(const xml_node& proto, const xml_node& node)$/;"	f	class:pugi::xml_node
insertion_sort	include/pugixml.cpp	/^	template <typename I, typename Pred, typename T> void insertion_sort(I begin, I end, const Pred& pred, T*)$/;"	f
internal_object	include/pugixml.cpp	/^	PUGI__FN xml_attribute_struct* xml_attribute::internal_object() const$/;"	f	class:pugi::xml_attribute
internal_object	include/pugixml.cpp	/^	PUGI__FN xml_node_struct* xml_node::internal_object() const$/;"	f	class:pugi::xml_node
is_little_endian	include/pugixml.cpp	/^	PUGI__FN bool is_little_endian()$/;"	f
is_nan	include/pugixml.cpp	/^	PUGI__FN bool is_nan(double value)$/;"	f
is_posinv	include/pugixml.cpp	/^		bool is_posinv()$/;"	f	class:xpath_ast_node
is_text_node	include/pugixml.cpp	/^	inline bool is_text_node(xml_node_struct* node)$/;"	f
last_attribute	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::last_attribute() const$/;"	f	class:pugi::xml_node
last_child	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::last_child() const$/;"	f	class:pugi::xml_node
latin1_writer	include/pugixml.cpp	/^	struct latin1_writer$/;"	s	file:
length	include/pugixml.cpp	/^		size_t length() const$/;"	f	class:xpath_string
less	include/pugixml.cpp	/^	struct less$/;"	s	file:
less_equal	include/pugixml.cpp	/^	struct less_equal$/;"	s	file:
lex_axis_attribute	include/pugixml.cpp	/^		lex_axis_attribute,$/;"	e	enum:lexeme_t	file:
lex_close_brace	include/pugixml.cpp	/^		lex_close_brace,$/;"	e	enum:lexeme_t	file:
lex_close_square_brace	include/pugixml.cpp	/^		lex_close_square_brace,$/;"	e	enum:lexeme_t	file:
lex_comma	include/pugixml.cpp	/^		lex_comma,$/;"	e	enum:lexeme_t	file:
lex_dot	include/pugixml.cpp	/^		lex_dot,$/;"	e	enum:lexeme_t	file:
lex_double_colon	include/pugixml.cpp	/^		lex_double_colon,$/;"	e	enum:lexeme_t	file:
lex_double_dot	include/pugixml.cpp	/^		lex_double_dot,$/;"	e	enum:lexeme_t	file:
lex_double_slash	include/pugixml.cpp	/^		lex_double_slash,$/;"	e	enum:lexeme_t	file:
lex_eof	include/pugixml.cpp	/^		lex_eof$/;"	e	enum:lexeme_t	file:
lex_equal	include/pugixml.cpp	/^		lex_equal,$/;"	e	enum:lexeme_t	file:
lex_greater	include/pugixml.cpp	/^		lex_greater,$/;"	e	enum:lexeme_t	file:
lex_greater_or_equal	include/pugixml.cpp	/^		lex_greater_or_equal,$/;"	e	enum:lexeme_t	file:
lex_less	include/pugixml.cpp	/^		lex_less,$/;"	e	enum:lexeme_t	file:
lex_less_or_equal	include/pugixml.cpp	/^		lex_less_or_equal,$/;"	e	enum:lexeme_t	file:
lex_minus	include/pugixml.cpp	/^		lex_minus,$/;"	e	enum:lexeme_t	file:
lex_multiply	include/pugixml.cpp	/^		lex_multiply,$/;"	e	enum:lexeme_t	file:
lex_none	include/pugixml.cpp	/^		lex_none = 0,$/;"	e	enum:lexeme_t	file:
lex_not_equal	include/pugixml.cpp	/^		lex_not_equal,$/;"	e	enum:lexeme_t	file:
lex_number	include/pugixml.cpp	/^		lex_number,$/;"	e	enum:lexeme_t	file:
lex_open_brace	include/pugixml.cpp	/^		lex_open_brace,$/;"	e	enum:lexeme_t	file:
lex_open_square_brace	include/pugixml.cpp	/^		lex_open_square_brace,$/;"	e	enum:lexeme_t	file:
lex_plus	include/pugixml.cpp	/^		lex_plus,$/;"	e	enum:lexeme_t	file:
lex_quoted_string	include/pugixml.cpp	/^		lex_quoted_string,$/;"	e	enum:lexeme_t	file:
lex_slash	include/pugixml.cpp	/^		lex_slash,$/;"	e	enum:lexeme_t	file:
lex_string	include/pugixml.cpp	/^		lex_string,$/;"	e	enum:lexeme_t	file:
lex_union	include/pugixml.cpp	/^		lex_union,$/;"	e	enum:lexeme_t	file:
lex_var_ref	include/pugixml.cpp	/^		lex_var_ref,$/;"	e	enum:lexeme_t	file:
lexeme_t	include/pugixml.cpp	/^	enum lexeme_t$/;"	g	file:
load	include/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load(const char_t* contents, unsigned int options)$/;"	f	class:pugi::xml_document
load	include/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load(std::basic_istream<char, std::char_traits<char> >& stream, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_document
load	include/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load(std::basic_istream<wchar_t, std::char_traits<wchar_t> >& stream, unsigned int options)$/;"	f	class:pugi::xml_document
load_buffer	include/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load_buffer(const void* contents, size_t size, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_document
load_buffer_impl	include/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load_buffer_impl(void* contents, size_t size, unsigned int options, xml_encoding encoding, bool is_mutable, bool own)$/;"	f	class:pugi::xml_document
load_buffer_inplace	include/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load_buffer_inplace(void* contents, size_t size, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_document
load_buffer_inplace_own	include/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load_buffer_inplace_own(void* contents, size_t size, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_document
load_file	include/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load_file(const char* path_, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_document
load_file	include/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load_file(const wchar_t* path_, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_document
load_file_impl	include/pugixml.cpp	/^	PUGI__FN xml_parse_result load_file_impl(xml_document& doc, FILE* file, unsigned int options, xml_encoding encoding)$/;"	f
load_stream_data_noseek	include/pugixml.cpp	/^	template <typename T> PUGI__FN xml_parse_status load_stream_data_noseek(std::basic_istream<T>& stream, void** out_buffer, size_t* out_size)$/;"	f
load_stream_data_seek	include/pugixml.cpp	/^	template <typename T> PUGI__FN xml_parse_status load_stream_data_seek(std::basic_istream<T>& stream, void** out_buffer, size_t* out_size)$/;"	f
load_stream_impl	include/pugixml.cpp	/^	template <typename T> PUGI__FN xml_parse_result load_stream_impl(xml_document& doc, std::basic_istream<T>& stream, unsigned int options, xml_encoding encoding)$/;"	f
local_name	include/pugixml.cpp	/^	PUGI__FN const char_t* local_name(const xpath_node& node)$/;"	f
low	include/pugixml.cpp	/^		static value_type low(value_type result, uint32_t ch)$/;"	f	struct:latin1_writer
low	include/pugixml.cpp	/^		static value_type low(value_type result, uint32_t ch)$/;"	f	struct:utf16_writer
low	include/pugixml.cpp	/^		static value_type low(value_type result, uint32_t ch)$/;"	f	struct:utf32_writer
low	include/pugixml.cpp	/^		static value_type low(value_type result, uint32_t ch)$/;"	f	struct:utf8_counter
low	include/pugixml.cpp	/^		static value_type low(value_type result, uint32_t ch)$/;"	f	struct:utf8_writer
low	include/pugixml.cpp	/^		static value_type low(value_type result, uint32_t)$/;"	f	struct:utf16_counter
low	include/pugixml.cpp	/^		static value_type low(value_type result, uint32_t)$/;"	f	struct:utf32_counter
make_parse_result	include/pugixml.cpp	/^	inline xml_parse_result make_parse_result(xml_parse_status status, ptrdiff_t offset = 0)$/;"	f
median	include/pugixml.cpp	/^	template <typename I, typename Pred> void median(I first, I middle, I last, const Pred& pred)$/;"	f
median3	include/pugixml.cpp	/^	template <typename I, typename Pred> void median3(I first, I middle, I last, const Pred& pred)$/;"	f
memory	include/pugixml.cpp	/^		void* memory;$/;"	m	struct:xml_memory_page	file:
min_element	include/pugixml.cpp	/^	template <typename I, typename Pred> I min_element(I begin, I end, const Pred& pred)$/;"	f
n	include/pugixml.cpp	/^		xpath_node n;$/;"	m	struct:xpath_context	file:
name	include/pugixml.cpp	/^		char_t name[1];$/;"	m	struct:xpath_variable_boolean	file:
name	include/pugixml.cpp	/^		char_t name[1];$/;"	m	struct:xpath_variable_node_set	file:
name	include/pugixml.cpp	/^		char_t name[1];$/;"	m	struct:xpath_variable_number	file:
name	include/pugixml.cpp	/^		char_t name[1];$/;"	m	struct:xpath_variable_string	file:
name	include/pugixml.cpp	/^		char_t*					name;					\/\/\/< Pointer to element name.$/;"	m	struct:pugi::xml_node_struct	file:
name	include/pugixml.cpp	/^		char_t* name;	\/\/\/< Pointer to attribute name.$/;"	m	struct:pugi::xml_attribute_struct	file:
name	include/pugixml.cpp	/^	PUGI__FN const char_t* xml_attribute::name() const$/;"	f	class:pugi::xml_attribute
name	include/pugixml.cpp	/^	PUGI__FN const char_t* xml_node::name() const$/;"	f	class:pugi::xml_node
name	include/pugixml.cpp	/^	PUGI__FN const char_t* xpath_variable::name() const$/;"	f	class:pugi::xpath_variable
namespace_uri	include/pugixml.cpp	/^	PUGI__FN const char_t* namespace_uri(const xml_attribute& attr, const xml_node& parent)$/;"	f
namespace_uri	include/pugixml.cpp	/^	PUGI__FN const char_t* namespace_uri(const xml_node& node)$/;"	f
namespace_uri	include/pugixml.cpp	/^	PUGI__FN const char_t* namespace_uri(const xpath_node& node)$/;"	f
namespace_uri_predicate	include/pugixml.cpp	/^		namespace_uri_predicate(const char_t* name)$/;"	f	struct:namespace_uri_predicate
namespace_uri_predicate	include/pugixml.cpp	/^	struct namespace_uri_predicate$/;"	s	file:
need_endian_swap_utf	include/pugixml.cpp	/^	PUGI__FN bool need_endian_swap_utf(xml_encoding le, xml_encoding re)$/;"	f
new_xpath_variable	include/pugixml.cpp	/^	PUGI__FN xpath_variable* new_xpath_variable(xpath_value_type type, const char_t* name)$/;"	f
new_xpath_variable	include/pugixml.cpp	/^	template <typename T> PUGI__FN T* new_xpath_variable(const char_t* name)$/;"	f
next	include/pugixml.cpp	/^		void next()$/;"	f	class:xpath_lexer
next	include/pugixml.cpp	/^		xml_memory_page* next;$/;"	m	struct:xml_memory_page	file:
next	include/pugixml.cpp	/^		xml_stream_chunk* next;$/;"	m	struct:xml_stream_chunk	file:
next	include/pugixml.cpp	/^		xpath_memory_block* next;$/;"	m	struct:xpath_memory_block	file:
next_attribute	include/pugixml.cpp	/^		xml_attribute_struct* next_attribute;	\/\/\/< Next attribute$/;"	m	struct:pugi::xml_attribute_struct	file:
next_attribute	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_attribute::next_attribute() const$/;"	f	class:pugi::xml_attribute
next_sibling	include/pugixml.cpp	/^		xml_node_struct*		next_sibling;			\/\/\/< Right brother$/;"	m	struct:pugi::xml_node_struct	file:
next_sibling	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::next_sibling() const$/;"	f	class:pugi::xml_node
next_sibling	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::next_sibling(const char_t* name_) const$/;"	f	class:pugi::xml_node
node	include/pugixml.cpp	/^	PUGI__FN xml_node xpath_node::node() const$/;"	f	class:pugi::xpath_node
node_height	include/pugixml.cpp	/^	PUGI__FN unsigned int node_height(xml_node n)$/;"	f
node_is_ancestor	include/pugixml.cpp	/^	PUGI__FN bool node_is_ancestor(xml_node parent, xml_node node)$/;"	f
node_is_before	include/pugixml.cpp	/^	PUGI__FN bool node_is_before(xml_node ln, unsigned int lh, xml_node rn, unsigned int rh)$/;"	f
node_output	include/pugixml.cpp	/^	PUGI__FN void node_output(xml_buffered_writer& writer, const xml_node& node, const char_t* indent, unsigned int flags, unsigned int depth)$/;"	f
node_output_attributes	include/pugixml.cpp	/^	PUGI__FN void node_output_attributes(xml_buffered_writer& writer, const xml_node& node, unsigned int flags)$/;"	f
nodetest	include/pugixml.cpp	/^			const char_t* nodetest;$/;"	m	union:xpath_ast_node::__anon5	file:
nodetest_all	include/pugixml.cpp	/^		nodetest_all,$/;"	e	enum:nodetest_t	file:
nodetest_all_in_namespace	include/pugixml.cpp	/^		nodetest_all_in_namespace$/;"	e	enum:nodetest_t	file:
nodetest_name	include/pugixml.cpp	/^		nodetest_name,$/;"	e	enum:nodetest_t	file:
nodetest_none	include/pugixml.cpp	/^		nodetest_none,$/;"	e	enum:nodetest_t	file:
nodetest_pi	include/pugixml.cpp	/^		nodetest_pi,$/;"	e	enum:nodetest_t	file:
nodetest_t	include/pugixml.cpp	/^	enum nodetest_t$/;"	g	file:
nodetest_type_comment	include/pugixml.cpp	/^		nodetest_type_comment,$/;"	e	enum:nodetest_t	file:
nodetest_type_node	include/pugixml.cpp	/^		nodetest_type_node,$/;"	e	enum:nodetest_t	file:
nodetest_type_pi	include/pugixml.cpp	/^		nodetest_type_pi,$/;"	e	enum:nodetest_t	file:
nodetest_type_text	include/pugixml.cpp	/^		nodetest_type_text,$/;"	e	enum:nodetest_t	file:
normalize_space	include/pugixml.cpp	/^	PUGI__FN void normalize_space(char_t* buffer)$/;"	f
not_equal_to	include/pugixml.cpp	/^	struct not_equal_to$/;"	s	file:
number	include/pugixml.cpp	/^			double number;$/;"	m	union:xpath_ast_node::__anon5	file:
offset_debug	include/pugixml.cpp	/^	PUGI__FN ptrdiff_t xml_node::offset_debug() const$/;"	f	class:pugi::xml_node
open_file_wide	include/pugixml.cpp	/^	PUGI__FN FILE* open_file_wide(const wchar_t* path, const wchar_t* mode)$/;"	f
operator !	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator!() const$/;"	f	class:pugi::xml_attribute
operator !	include/pugixml.cpp	/^	PUGI__FN bool xml_node::operator!() const$/;"	f	class:pugi::xml_node
operator !	include/pugixml.cpp	/^	PUGI__FN bool xml_text::operator!() const$/;"	f	class:pugi::xml_text
operator !	include/pugixml.cpp	/^	PUGI__FN bool xpath_node::operator!() const$/;"	f	class:pugi::xpath_node
operator !	include/pugixml.cpp	/^	PUGI__FN bool xpath_query::operator!() const$/;"	f	class:pugi::xpath_query
operator !=	include/pugixml.cpp	/^		bool operator!=(const xpath_string& o) const$/;"	f	class:xpath_string
operator !=	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator!=(const xml_attribute& r) const$/;"	f	class:pugi::xml_attribute
operator !=	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute_iterator::operator!=(const xml_attribute_iterator& rhs) const$/;"	f	class:pugi::xml_attribute_iterator
operator !=	include/pugixml.cpp	/^	PUGI__FN bool xml_named_node_iterator::operator!=(const xml_named_node_iterator& rhs) const$/;"	f	class:pugi::xml_named_node_iterator
operator !=	include/pugixml.cpp	/^	PUGI__FN bool xml_node::operator!=(const xml_node& r) const$/;"	f	class:pugi::xml_node
operator !=	include/pugixml.cpp	/^	PUGI__FN bool xml_node_iterator::operator!=(const xml_node_iterator& rhs) const$/;"	f	class:pugi::xml_node_iterator
operator !=	include/pugixml.cpp	/^	PUGI__FN bool xpath_node::operator!=(const xpath_node& n) const$/;"	f	class:pugi::xpath_node
operator &&	include/pugixml.cpp	/^	PUGI__FN bool operator&&(const xml_attribute& lhs, bool rhs)$/;"	f	namespace:pugi
operator &&	include/pugixml.cpp	/^	PUGI__FN bool operator&&(const xml_node& lhs, bool rhs)$/;"	f	namespace:pugi
operator &&	include/pugixml.cpp	/^	PUGI__FN bool operator&&(const xml_text& lhs, bool rhs)$/;"	f	namespace:pugi
operator &&	include/pugixml.cpp	/^	PUGI__FN bool operator&&(const xpath_node& lhs, bool rhs)$/;"	f	namespace:pugi
operator ()	include/pugixml.cpp	/^		bool operator()(const xml_attribute& a) const$/;"	f	struct:namespace_uri_predicate
operator ()	include/pugixml.cpp	/^		bool operator()(const xpath_node& lhs, const xpath_node& rhs) const$/;"	f	struct:document_order_comparator
operator ()	include/pugixml.cpp	/^		bool operator()(const xpath_node& lhs, const xpath_node& rhs) const$/;"	f	struct:duplicate_comparator
operator ()	include/pugixml.cpp	/^		template <typename T> bool operator()(const T& lhs, const T& rhs) const$/;"	f	struct:equal_to
operator ()	include/pugixml.cpp	/^		template <typename T> bool operator()(const T& lhs, const T& rhs) const$/;"	f	struct:less
operator ()	include/pugixml.cpp	/^		template <typename T> bool operator()(const T& lhs, const T& rhs) const$/;"	f	struct:less_equal
operator ()	include/pugixml.cpp	/^		template <typename T> bool operator()(const T& lhs, const T& rhs) const$/;"	f	struct:not_equal_to
operator *	include/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute_iterator::operator*() const$/;"	f	class:pugi::xml_attribute_iterator
operator *	include/pugixml.cpp	/^	PUGI__FN xml_node& xml_named_node_iterator::operator*() const$/;"	f	class:pugi::xml_named_node_iterator
operator *	include/pugixml.cpp	/^	PUGI__FN xml_node& xml_node_iterator::operator*() const$/;"	f	class:pugi::xml_node_iterator
operator ++	include/pugixml.cpp	/^	PUGI__FN const xml_attribute_iterator& xml_attribute_iterator::operator++()$/;"	f	class:pugi::xml_attribute_iterator
operator ++	include/pugixml.cpp	/^	PUGI__FN const xml_named_node_iterator& xml_named_node_iterator::operator++()$/;"	f	class:pugi::xml_named_node_iterator
operator ++	include/pugixml.cpp	/^	PUGI__FN const xml_node_iterator& xml_node_iterator::operator++()$/;"	f	class:pugi::xml_node_iterator
operator ++	include/pugixml.cpp	/^	PUGI__FN xml_attribute_iterator xml_attribute_iterator::operator++(int)$/;"	f	class:pugi::xml_attribute_iterator
operator ++	include/pugixml.cpp	/^	PUGI__FN xml_named_node_iterator xml_named_node_iterator::operator++(int)$/;"	f	class:pugi::xml_named_node_iterator
operator ++	include/pugixml.cpp	/^	PUGI__FN xml_node_iterator xml_node_iterator::operator++(int)$/;"	f	class:pugi::xml_node_iterator
operator --	include/pugixml.cpp	/^	PUGI__FN const xml_attribute_iterator& xml_attribute_iterator::operator--()$/;"	f	class:pugi::xml_attribute_iterator
operator --	include/pugixml.cpp	/^	PUGI__FN const xml_node_iterator& xml_node_iterator::operator--()$/;"	f	class:pugi::xml_node_iterator
operator --	include/pugixml.cpp	/^	PUGI__FN xml_attribute_iterator xml_attribute_iterator::operator--(int)$/;"	f	class:pugi::xml_attribute_iterator
operator --	include/pugixml.cpp	/^	PUGI__FN xml_node_iterator xml_node_iterator::operator--(int)$/;"	f	class:pugi::xml_node_iterator
operator ->	include/pugixml.cpp	/^	PUGI__FN xml_attribute* xml_attribute_iterator::operator->() const$/;"	f	class:pugi::xml_attribute_iterator
operator ->	include/pugixml.cpp	/^	PUGI__FN xml_node* xml_named_node_iterator::operator->() const$/;"	f	class:pugi::xml_named_node_iterator
operator ->	include/pugixml.cpp	/^	PUGI__FN xml_node* xml_node_iterator::operator->() const$/;"	f	class:pugi::xml_node_iterator
operator <	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator<(const xml_attribute& r) const$/;"	f	class:pugi::xml_attribute
operator <	include/pugixml.cpp	/^	PUGI__FN bool xml_node::operator<(const xml_node& r) const$/;"	f	class:pugi::xml_node
operator <=	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator<=(const xml_attribute& r) const$/;"	f	class:pugi::xml_attribute
operator <=	include/pugixml.cpp	/^	PUGI__FN bool xml_node::operator<=(const xml_node& r) const$/;"	f	class:pugi::xml_node
operator =	include/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute::operator=(bool rhs)$/;"	f	class:pugi::xml_attribute
operator =	include/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute::operator=(const char_t* rhs)$/;"	f	class:pugi::xml_attribute
operator =	include/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute::operator=(double rhs)$/;"	f	class:pugi::xml_attribute
operator =	include/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute::operator=(int rhs)$/;"	f	class:pugi::xml_attribute
operator =	include/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute::operator=(unsigned int rhs)$/;"	f	class:pugi::xml_attribute
operator =	include/pugixml.cpp	/^	PUGI__FN xml_text& xml_text::operator=(bool rhs)$/;"	f	class:pugi::xml_text
operator =	include/pugixml.cpp	/^	PUGI__FN xml_text& xml_text::operator=(const char_t* rhs)$/;"	f	class:pugi::xml_text
operator =	include/pugixml.cpp	/^	PUGI__FN xml_text& xml_text::operator=(double rhs)$/;"	f	class:pugi::xml_text
operator =	include/pugixml.cpp	/^	PUGI__FN xml_text& xml_text::operator=(int rhs)$/;"	f	class:pugi::xml_text
operator =	include/pugixml.cpp	/^	PUGI__FN xml_text& xml_text::operator=(unsigned int rhs)$/;"	f	class:pugi::xml_text
operator =	include/pugixml.cpp	/^	PUGI__FN xpath_node_set& xpath_node_set::operator=(const xpath_node_set& ns)$/;"	f	class:pugi::xpath_node_set
operator ==	include/pugixml.cpp	/^		bool operator==(const char_t* other) const$/;"	f	struct:xpath_lexer_string
operator ==	include/pugixml.cpp	/^		bool operator==(const xpath_string& o) const$/;"	f	class:xpath_string
operator ==	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator==(const xml_attribute& r) const$/;"	f	class:pugi::xml_attribute
operator ==	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute_iterator::operator==(const xml_attribute_iterator& rhs) const$/;"	f	class:pugi::xml_attribute_iterator
operator ==	include/pugixml.cpp	/^	PUGI__FN bool xml_named_node_iterator::operator==(const xml_named_node_iterator& rhs) const$/;"	f	class:pugi::xml_named_node_iterator
operator ==	include/pugixml.cpp	/^	PUGI__FN bool xml_node::operator==(const xml_node& r) const$/;"	f	class:pugi::xml_node
operator ==	include/pugixml.cpp	/^	PUGI__FN bool xml_node_iterator::operator==(const xml_node_iterator& rhs) const$/;"	f	class:pugi::xml_node_iterator
operator ==	include/pugixml.cpp	/^	PUGI__FN bool xpath_node::operator==(const xpath_node& n) const$/;"	f	class:pugi::xpath_node
operator >	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator>(const xml_attribute& r) const$/;"	f	class:pugi::xml_attribute
operator >	include/pugixml.cpp	/^	PUGI__FN bool xml_node::operator>(const xml_node& r) const$/;"	f	class:pugi::xml_node
operator >=	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator>=(const xml_attribute& r) const$/;"	f	class:pugi::xml_attribute
operator >=	include/pugixml.cpp	/^	PUGI__FN bool xml_node::operator>=(const xml_node& r) const$/;"	f	class:pugi::xml_node
operator []	include/pugixml.cpp	/^	PUGI__FN const xpath_node& xpath_node_set::operator[](size_t index) const$/;"	f	class:pugi::xpath_node_set
operator bool	include/pugixml.cpp	/^	PUGI__FN xml_parse_result::operator bool() const$/;"	f	class:pugi::xml_parse_result
operator bool	include/pugixml.cpp	/^	PUGI__FN xpath_parse_result::operator bool() const$/;"	f	class:pugi::xpath_parse_result
operator xml_attribute::unspecified_bool_type	include/pugixml.cpp	/^	PUGI__FN xml_attribute::operator xml_attribute::unspecified_bool_type() const$/;"	f	class:pugi::xml_attribute
operator xml_node::unspecified_bool_type	include/pugixml.cpp	/^	PUGI__FN xml_node::operator xml_node::unspecified_bool_type() const$/;"	f	class:pugi::xml_node
operator xml_text::unspecified_bool_type	include/pugixml.cpp	/^	PUGI__FN xml_text::operator xml_text::unspecified_bool_type() const$/;"	f	class:pugi::xml_text
operator xpath_node::unspecified_bool_type	include/pugixml.cpp	/^	PUGI__FN xpath_node::operator xpath_node::unspecified_bool_type() const$/;"	f	class:pugi::xpath_node
operator xpath_query::unspecified_bool_type	include/pugixml.cpp	/^	PUGI__FN xpath_query::operator xpath_query::unspecified_bool_type() const$/;"	f	class:pugi::xpath_query
operator ||	include/pugixml.cpp	/^	PUGI__FN bool operator||(const xml_attribute& lhs, bool rhs)$/;"	f	namespace:pugi
operator ||	include/pugixml.cpp	/^	PUGI__FN bool operator||(const xml_node& lhs, bool rhs)$/;"	f	namespace:pugi
operator ||	include/pugixml.cpp	/^	PUGI__FN bool operator||(const xml_text& lhs, bool rhs)$/;"	f	namespace:pugi
operator ||	include/pugixml.cpp	/^	PUGI__FN bool operator||(const xpath_node& lhs, bool rhs)$/;"	f	namespace:pugi
opt_false	include/pugixml.cpp	/^	struct opt_false$/;"	s	file:
opt_true	include/pugixml.cpp	/^	struct opt_true$/;"	s	file:
page_offset	include/pugixml.cpp	/^		uint16_t page_offset; \/\/ offset from page->data$/;"	m	struct:xml_memory_string_header	file:
parent	include/pugixml.cpp	/^		xml_node_struct*		parent;					\/\/\/< Pointer to parent$/;"	m	struct:pugi::xml_node_struct	file:
parent	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::parent() const$/;"	f	class:pugi::xml_node
parent	include/pugixml.cpp	/^	PUGI__FN xml_node xpath_node::parent() const$/;"	f	class:pugi::xpath_node
parse	include/pugixml.cpp	/^		char_t* parse(char_t* s, xml_node_struct* xmldoc, unsigned int optmsk, char_t endch)$/;"	f	struct:xml_parser
parse	include/pugixml.cpp	/^		static char_t* parse(char_t* s)$/;"	f	struct:strconv_pcdata_impl
parse	include/pugixml.cpp	/^		static xml_parse_result parse(char_t* buffer, size_t length, xml_node_struct* root, unsigned int optmsk)$/;"	f	struct:xml_parser
parse	include/pugixml.cpp	/^		static xpath_ast_node* parse(const char_t* query, xpath_variable_set* variables, xpath_allocator* alloc, xpath_parse_result* result)$/;"	f	struct:xpath_parser
parse	include/pugixml.cpp	/^		xpath_ast_node* parse()$/;"	f	struct:xpath_parser
parse_additive_expression	include/pugixml.cpp	/^		xpath_ast_node* parse_additive_expression()$/;"	f	struct:xpath_parser
parse_and_expression	include/pugixml.cpp	/^		xpath_ast_node* parse_and_expression()$/;"	f	struct:xpath_parser
parse_axis_name	include/pugixml.cpp	/^		axis_t parse_axis_name(const xpath_lexer_string& name, bool& specified)$/;"	f	struct:xpath_parser
parse_doctype_group	include/pugixml.cpp	/^		char_t* parse_doctype_group(char_t* s, char_t endch, bool toplevel)$/;"	f	struct:xml_parser
parse_doctype_ignore	include/pugixml.cpp	/^		char_t* parse_doctype_ignore(char_t* s)$/;"	f	struct:xml_parser
parse_doctype_primitive	include/pugixml.cpp	/^		char_t* parse_doctype_primitive(char_t* s)$/;"	f	struct:xml_parser
parse_eol	include/pugixml.cpp	/^		static char_t* parse_eol(char_t* s, char_t end_quote)$/;"	f	struct:strconv_attribute_impl
parse_equality_expression	include/pugixml.cpp	/^		xpath_ast_node* parse_equality_expression()$/;"	f	struct:xpath_parser
parse_exclamation	include/pugixml.cpp	/^		char_t* parse_exclamation(char_t* s, xml_node_struct* cursor, unsigned int optmsk, char_t endch)$/;"	f	struct:xml_parser
parse_expression	include/pugixml.cpp	/^		xpath_ast_node* parse_expression()$/;"	f	struct:xpath_parser
parse_filter_expression	include/pugixml.cpp	/^		xpath_ast_node* parse_filter_expression()$/;"	f	struct:xpath_parser
parse_function	include/pugixml.cpp	/^		xpath_ast_node* parse_function(const xpath_lexer_string& name, size_t argc, xpath_ast_node* args[2])$/;"	f	struct:xpath_parser
parse_function_helper	include/pugixml.cpp	/^		xpath_ast_node* parse_function_helper(ast_type_t type0, ast_type_t type1, size_t argc, xpath_ast_node* args[2])$/;"	f	struct:xpath_parser
parse_location_path	include/pugixml.cpp	/^		xpath_ast_node* parse_location_path()$/;"	f	struct:xpath_parser
parse_multiplicative_expression	include/pugixml.cpp	/^		xpath_ast_node* parse_multiplicative_expression()$/;"	f	struct:xpath_parser
parse_node_test_type	include/pugixml.cpp	/^		nodetest_t parse_node_test_type(const xpath_lexer_string& name)$/;"	f	struct:xpath_parser
parse_or_expression	include/pugixml.cpp	/^		xpath_ast_node* parse_or_expression()$/;"	f	struct:xpath_parser
parse_path_expression	include/pugixml.cpp	/^		xpath_ast_node* parse_path_expression()$/;"	f	struct:xpath_parser
parse_primary_expression	include/pugixml.cpp	/^		xpath_ast_node* parse_primary_expression()$/;"	f	struct:xpath_parser
parse_question	include/pugixml.cpp	/^		char_t* parse_question(char_t* s, xml_node_struct*& ref_cursor, unsigned int optmsk, char_t endch)$/;"	f	struct:xml_parser
parse_relational_expression	include/pugixml.cpp	/^		xpath_ast_node* parse_relational_expression()$/;"	f	struct:xpath_parser
parse_relative_location_path	include/pugixml.cpp	/^		xpath_ast_node* parse_relative_location_path(xpath_ast_node* set)$/;"	f	struct:xpath_parser
parse_simple	include/pugixml.cpp	/^		static char_t* parse_simple(char_t* s, char_t end_quote)$/;"	f	struct:strconv_attribute_impl
parse_step	include/pugixml.cpp	/^		xpath_ast_node* parse_step(xpath_ast_node* set)$/;"	f	struct:xpath_parser
parse_unary_expression	include/pugixml.cpp	/^		xpath_ast_node* parse_unary_expression()$/;"	f	struct:xpath_parser
parse_union_expression	include/pugixml.cpp	/^		xpath_ast_node* parse_union_expression()$/;"	f	struct:xpath_parser
parse_wconv	include/pugixml.cpp	/^		static char_t* parse_wconv(char_t* s, char_t end_quote)$/;"	f	struct:strconv_attribute_impl
parse_wnorm	include/pugixml.cpp	/^		static char_t* parse_wnorm(char_t* s, char_t end_quote)$/;"	f	struct:strconv_attribute_impl
partition	include/pugixml.cpp	/^	template <typename I, typename Pred> void partition(I begin, I middle, I end, const Pred& pred, I* out_eqbeg, I* out_eqend)$/;"	f
path	include/pugixml.cpp	/^	PUGI__FN string_t xml_node::path(char_t delimiter) const$/;"	f	class:pugi::xml_node
position	include/pugixml.cpp	/^		size_t position, size;$/;"	m	struct:xpath_context	file:
prefix	include/pugixml.cpp	/^		const char_t* prefix;$/;"	m	struct:namespace_uri_predicate	file:
prefix_length	include/pugixml.cpp	/^		size_t prefix_length;$/;"	m	struct:namespace_uri_predicate	file:
prepend_attribute	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::prepend_attribute(const char_t* name_)$/;"	f	class:pugi::xml_node
prepend_child	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::prepend_child(const char_t* name_)$/;"	f	class:pugi::xml_node
prepend_child	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::prepend_child(xml_node_type type_)$/;"	f	class:pugi::xml_node
prepend_copy	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::prepend_copy(const xml_attribute& proto)$/;"	f	class:pugi::xml_node
prepend_copy	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::prepend_copy(const xml_node& proto)$/;"	f	class:pugi::xml_node
prev	include/pugixml.cpp	/^		xml_memory_page* prev;$/;"	m	struct:xml_memory_page	file:
prev_attribute_c	include/pugixml.cpp	/^		xml_attribute_struct* prev_attribute_c;	\/\/\/< Previous attribute (cyclic list)$/;"	m	struct:pugi::xml_attribute_struct	file:
prev_sibling_c	include/pugixml.cpp	/^		xml_node_struct*		prev_sibling_c;			\/\/\/< Left brother (cyclic list)$/;"	m	struct:pugi::xml_node_struct	file:
previous_attribute	include/pugixml.cpp	/^	PUGI__FN xml_attribute xml_attribute::previous_attribute() const$/;"	f	class:pugi::xml_attribute
previous_sibling	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::previous_sibling() const$/;"	f	class:pugi::xml_node
previous_sibling	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::previous_sibling(const char_t* name_) const$/;"	f	class:pugi::xml_node
print	include/pugixml.cpp	/^	PUGI__FN void xml_node::print(std::basic_ostream<char, std::char_traits<char> >& stream, const char_t* indent, unsigned int flags, xml_encoding encoding, unsigned int depth) const$/;"	f	class:pugi::xml_node
print	include/pugixml.cpp	/^	PUGI__FN void xml_node::print(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& stream, const char_t* indent, unsigned int flags, unsigned int depth) const$/;"	f	class:pugi::xml_node
print	include/pugixml.cpp	/^	PUGI__FN void xml_node::print(xml_writer& writer, const char_t* indent, unsigned int flags, xml_encoding encoding, unsigned int depth) const$/;"	f	class:pugi::xml_node
pugi	include/pugixml.cpp	/^namespace pugi$/;"	n	file:
push	include/pugixml.cpp	/^		void push(char_t*& s, size_t count)$/;"	f	struct:gap
push_back	include/pugixml.cpp	/^		void push_back(const xpath_node& node, xpath_allocator* alloc)$/;"	f	class:xpath_node_set_raw
qualified_name	include/pugixml.cpp	/^	PUGI__FN const char_t* qualified_name(const xpath_node& node)$/;"	f
reallocate	include/pugixml.cpp	/^		void* reallocate(void* ptr, size_t old_size, size_t new_size)$/;"	f	class:xpath_allocator
recursive_copy_skip	include/pugixml.cpp	/^	PUGI__FN void recursive_copy_skip(xml_node& dest, const xml_node& source, const xml_node& skip)$/;"	f
release	include/pugixml.cpp	/^		void release()$/;"	f	class:xpath_allocator
release	include/pugixml.cpp	/^		void* release()$/;"	f	struct:buffer_holder
remove_attribute	include/pugixml.cpp	/^	PUGI__FN bool xml_node::remove_attribute(const char_t* name_)$/;"	f	class:pugi::xml_node
remove_attribute	include/pugixml.cpp	/^	PUGI__FN bool xml_node::remove_attribute(const xml_attribute& a)$/;"	f	class:pugi::xml_node
remove_child	include/pugixml.cpp	/^	PUGI__FN bool xml_node::remove_child(const char_t* name_)$/;"	f	class:pugi::xml_node
remove_child	include/pugixml.cpp	/^	PUGI__FN bool xml_node::remove_child(const xml_node& n)$/;"	f	class:pugi::xml_node
remove_duplicates	include/pugixml.cpp	/^		void remove_duplicates()$/;"	f	class:xpath_node_set_raw
reset	include/pugixml.cpp	/^	PUGI__FN void xml_document::reset()$/;"	f	class:pugi::xml_document
reset	include/pugixml.cpp	/^	PUGI__FN void xml_document::reset(const xml_document& proto)$/;"	f	class:pugi::xml_document
result	include/pugixml.cpp	/^		xpath_allocator result;$/;"	m	struct:xpath_stack_data	file:
result	include/pugixml.cpp	/^		xpath_allocator* result;$/;"	m	struct:xpath_stack	file:
result	include/pugixml.cpp	/^	PUGI__FN const xpath_parse_result& xpath_exception::result() const$/;"	f	class:pugi::xpath_exception
result	include/pugixml.cpp	/^	PUGI__FN const xpath_parse_result& xpath_query::result() const$/;"	f	class:pugi::xpath_query
rettype	include/pugixml.cpp	/^		xpath_value_type rettype() const$/;"	f	class:xpath_ast_node
return_type	include/pugixml.cpp	/^	PUGI__FN xpath_value_type xpath_query::return_type() const$/;"	f	class:pugi::xpath_query
reverse	include/pugixml.cpp	/^	template <typename I> void reverse(I begin, I end)$/;"	f
revert	include/pugixml.cpp	/^		void revert(const xpath_allocator& state)$/;"	f	class:xpath_allocator
root	include/pugixml.cpp	/^		xpath_ast_node* root;$/;"	m	struct:xpath_query_impl	file:
root	include/pugixml.cpp	/^	PUGI__FN xml_node xml_node::root() const$/;"	f	class:pugi::xml_node
round_nearest	include/pugixml.cpp	/^	PUGI__FN double round_nearest(double value)$/;"	f
round_nearest_nzero	include/pugixml.cpp	/^	PUGI__FN double round_nearest_nzero(double value)$/;"	f
save	include/pugixml.cpp	/^	PUGI__FN void xml_document::save(std::basic_ostream<char, std::char_traits<char> >& stream, const char_t* indent, unsigned int flags, xml_encoding encoding) const$/;"	f	class:pugi::xml_document
save	include/pugixml.cpp	/^	PUGI__FN void xml_document::save(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& stream, const char_t* indent, unsigned int flags) const$/;"	f	class:pugi::xml_document
save	include/pugixml.cpp	/^	PUGI__FN void xml_document::save(xml_writer& writer, const char_t* indent, unsigned int flags, xml_encoding encoding) const$/;"	f	class:pugi::xml_document
save_file	include/pugixml.cpp	/^	PUGI__FN bool xml_document::save_file(const char* path_, const char_t* indent, unsigned int flags, xml_encoding encoding) const$/;"	f	class:pugi::xml_document
save_file	include/pugixml.cpp	/^	PUGI__FN bool xml_document::save_file(const wchar_t* path_, const char_t* indent, unsigned int flags, xml_encoding encoding) const$/;"	f	class:pugi::xml_document
save_file_impl	include/pugixml.cpp	/^	PUGI__FN bool save_file_impl(const xml_document& doc, FILE* file, const char_t* indent, unsigned int flags, xml_encoding encoding)$/;"	f
scratch	include/pugixml.cpp	/^		} scratch;$/;"	m	class:xml_buffered_writer	typeref:union:xml_buffered_writer::__anon4	file:
select_nodes	include/pugixml.cpp	/^	PUGI__FN xpath_node_set xml_node::select_nodes(const char_t* query, xpath_variable_set* variables) const$/;"	f	class:pugi::xml_node
select_nodes	include/pugixml.cpp	/^	PUGI__FN xpath_node_set xml_node::select_nodes(const xpath_query& query) const$/;"	f	class:pugi::xml_node
select_single_node	include/pugixml.cpp	/^	PUGI__FN xpath_node xml_node::select_single_node(const char_t* query, xpath_variable_set* variables) const$/;"	f	class:pugi::xml_node
select_single_node	include/pugixml.cpp	/^	PUGI__FN xpath_node xml_node::select_single_node(const xpath_query& query) const$/;"	f	class:pugi::xml_node
set	include/pugixml.cpp	/^	PUGI__FN bool xml_text::set(bool rhs)$/;"	f	class:pugi::xml_text
set	include/pugixml.cpp	/^	PUGI__FN bool xml_text::set(const char_t* rhs)$/;"	f	class:pugi::xml_text
set	include/pugixml.cpp	/^	PUGI__FN bool xml_text::set(double rhs)$/;"	f	class:pugi::xml_text
set	include/pugixml.cpp	/^	PUGI__FN bool xml_text::set(int rhs)$/;"	f	class:pugi::xml_text
set	include/pugixml.cpp	/^	PUGI__FN bool xml_text::set(unsigned int rhs)$/;"	f	class:pugi::xml_text
set	include/pugixml.cpp	/^	PUGI__FN bool xpath_variable::set(bool value)$/;"	f	class:pugi::xpath_variable
set	include/pugixml.cpp	/^	PUGI__FN bool xpath_variable::set(const char_t* value)$/;"	f	class:pugi::xpath_variable
set	include/pugixml.cpp	/^	PUGI__FN bool xpath_variable::set(const xpath_node_set& value)$/;"	f	class:pugi::xpath_variable
set	include/pugixml.cpp	/^	PUGI__FN bool xpath_variable::set(double value)$/;"	f	class:pugi::xpath_variable
set	include/pugixml.cpp	/^	PUGI__FN bool xpath_variable_set::set(const char_t* name, bool value)$/;"	f	class:pugi::xpath_variable_set
set	include/pugixml.cpp	/^	PUGI__FN bool xpath_variable_set::set(const char_t* name, const char_t* value)$/;"	f	class:pugi::xpath_variable_set
set	include/pugixml.cpp	/^	PUGI__FN bool xpath_variable_set::set(const char_t* name, const xpath_node_set& value)$/;"	f	class:pugi::xpath_variable_set
set	include/pugixml.cpp	/^	PUGI__FN bool xpath_variable_set::set(const char_t* name, double value)$/;"	f	class:pugi::xpath_variable_set
set_memory_management_functions	include/pugixml.cpp	/^	PUGI__FN void PUGIXML_FUNCTION set_memory_management_functions(allocation_function allocate, deallocation_function deallocate)$/;"	f	namespace:pugi
set_name	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_name(const char_t* rhs)$/;"	f	class:pugi::xml_attribute
set_name	include/pugixml.cpp	/^	PUGI__FN bool xml_node::set_name(const char_t* rhs)$/;"	f	class:pugi::xml_node
set_next	include/pugixml.cpp	/^		void set_next(xpath_ast_node* value)$/;"	f	class:xpath_ast_node
set_right	include/pugixml.cpp	/^		void set_right(xpath_ast_node* value)$/;"	f	class:xpath_ast_node
set_type	include/pugixml.cpp	/^		void set_type(xpath_node_set::type_t value)$/;"	f	class:xpath_node_set_raw
set_value	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_value(bool rhs)$/;"	f	class:pugi::xml_attribute
set_value	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_value(const char_t* rhs)$/;"	f	class:pugi::xml_attribute
set_value	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_value(double rhs)$/;"	f	class:pugi::xml_attribute
set_value	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_value(int rhs)$/;"	f	class:pugi::xml_attribute
set_value	include/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_value(unsigned int rhs)$/;"	f	class:pugi::xml_attribute
set_value	include/pugixml.cpp	/^	PUGI__FN bool xml_node::set_value(const char_t* rhs)$/;"	f	class:pugi::xml_node
set_value_buffer	include/pugixml.cpp	/^	PUGI__FN bool set_value_buffer(char_t*& dest, uintptr_t& header, uintptr_t header_mask, char (&buf)[128])$/;"	f
set_value_convert	include/pugixml.cpp	/^	PUGI__FN bool set_value_convert(char_t*& dest, uintptr_t& header, uintptr_t header_mask, bool value)$/;"	f
set_value_convert	include/pugixml.cpp	/^	PUGI__FN bool set_value_convert(char_t*& dest, uintptr_t& header, uintptr_t header_mask, double value)$/;"	f
set_value_convert	include/pugixml.cpp	/^	PUGI__FN bool set_value_convert(char_t*& dest, uintptr_t& header, uintptr_t header_mask, int value)$/;"	f
set_value_convert	include/pugixml.cpp	/^	PUGI__FN bool set_value_convert(char_t*& dest, uintptr_t& header, uintptr_t header_mask, unsigned int value)$/;"	f
size	include/pugixml.cpp	/^		size_t position, size;$/;"	m	struct:xpath_context	file:
size	include/pugixml.cpp	/^		size_t size() const$/;"	f	class:xpath_node_set_raw
size	include/pugixml.cpp	/^		size_t size;$/;"	m	struct:gap	file:
size	include/pugixml.cpp	/^		size_t size;$/;"	m	struct:xml_stream_chunk	file:
size	include/pugixml.cpp	/^	PUGI__FN size_t xpath_node_set::size() const$/;"	f	class:pugi::xpath_node_set
sort	include/pugixml.cpp	/^	PUGI__FN void xpath_node_set::sort(bool reverse)$/;"	f	class:pugi::xpath_node_set
sort	include/pugixml.cpp	/^	template <typename I, typename Pred> void sort(I begin, I end, const Pred& pred)$/;"	f
sort_do	include/pugixml.cpp	/^		void sort_do()$/;"	f	class:xpath_node_set_raw
stack	include/pugixml.cpp	/^		xpath_stack stack;$/;"	m	struct:xpath_stack_data	file:
starts_with	include/pugixml.cpp	/^	PUGI__FN bool starts_with(const char_t* string, const char_t* pattern)$/;"	f
state	include/pugixml.cpp	/^		const char_t* state() const$/;"	f	class:xpath_lexer
std	include/pugixml.cpp	/^namespace std$/;"	n	file:
step_do	include/pugixml.cpp	/^		template <class T> xpath_node_set_raw step_do(const xpath_context& c, const xpath_stack& stack, T v)$/;"	f	class:xpath_ast_node	file:
step_fill	include/pugixml.cpp	/^		template <class T> void step_fill(xpath_node_set_raw& ns, const xml_attribute& a, const xml_node& p, xpath_allocator* alloc, T v)$/;"	f	class:xpath_ast_node	file:
step_fill	include/pugixml.cpp	/^		template <class T> void step_fill(xpath_node_set_raw& ns, const xml_node& n, xpath_allocator* alloc, T)$/;"	f	class:xpath_ast_node	file:
step_push	include/pugixml.cpp	/^		void step_push(xpath_node_set_raw& ns, const xml_attribute& a, const xml_node& parent, xpath_allocator* alloc)$/;"	f	class:xpath_ast_node	file:
step_push	include/pugixml.cpp	/^		void step_push(xpath_node_set_raw& ns, const xml_node& n, xpath_allocator* alloc)$/;"	f	class:xpath_ast_node	file:
strconv_attribute_impl	include/pugixml.cpp	/^	template <typename opt_escape> struct strconv_attribute_impl$/;"	s	file:
strconv_attribute_t	include/pugixml.cpp	/^	typedef char_t* (*strconv_attribute_t)(char_t*, char_t);$/;"	t	file:
strconv_cdata	include/pugixml.cpp	/^	PUGI__FN char_t* strconv_cdata(char_t* s, char_t endch)$/;"	f
strconv_comment	include/pugixml.cpp	/^	PUGI__FN char_t* strconv_comment(char_t* s, char_t endch)$/;"	f
strconv_escape	include/pugixml.cpp	/^	PUGI__FN char_t* strconv_escape(char_t* s, gap& g)$/;"	f
strconv_pcdata_impl	include/pugixml.cpp	/^	template <typename opt_eol, typename opt_escape> struct strconv_pcdata_impl$/;"	s	file:
strconv_pcdata_t	include/pugixml.cpp	/^	typedef char_t* (*strconv_pcdata_t)(char_t*);$/;"	t	file:
strcpy_insitu	include/pugixml.cpp	/^	PUGI__FN bool strcpy_insitu(char_t*& dest, uintptr_t& header, uintptr_t header_mask, const char_t* source)$/;"	f
strcpy_insitu_allow	include/pugixml.cpp	/^	inline bool strcpy_insitu_allow(size_t length, uintptr_t allocated, char_t* target)$/;"	f
strequal	include/pugixml.cpp	/^	PUGI__FN bool strequal(const char_t* src, const char_t* dst)$/;"	f
strequalrange	include/pugixml.cpp	/^	PUGI__FN bool strequalrange(const char_t* lhs, const char_t* rhs, size_t count)$/;"	f
string	include/pugixml.cpp	/^			const char_t* string;$/;"	m	union:xpath_ast_node::__anon5	file:
string_value	include/pugixml.cpp	/^	PUGI__FN xpath_string string_value(const xpath_node& na, xpath_allocator* alloc)$/;"	f
strlength	include/pugixml.cpp	/^	PUGI__FN size_t strlength(const char_t* s)$/;"	f
swap	include/pugixml.cpp	/^	template <typename T> void swap(T& lhs, T& rhs)$/;"	f
temp	include/pugixml.cpp	/^		xpath_allocator temp;$/;"	m	struct:xpath_stack_data	file:
temp	include/pugixml.cpp	/^		xpath_allocator* temp;$/;"	m	struct:xpath_stack	file:
text	include/pugixml.cpp	/^	PUGI__FN xml_text xml_node::text() const$/;"	f	class:pugi::xml_node
text_output	include/pugixml.cpp	/^	PUGI__FN void text_output(xml_buffered_writer& writer, const char_t* s, chartypex_t type, unsigned int flags)$/;"	f
text_output_cdata	include/pugixml.cpp	/^	PUGI__FN void text_output_cdata(xml_buffered_writer& writer, const char_t* s)$/;"	f
text_output_escaped	include/pugixml.cpp	/^	PUGI__FN void text_output_escaped(xml_buffered_writer& writer, const char_t* s, chartypex_t type)$/;"	f
throw_error	include/pugixml.cpp	/^		void throw_error(const char* message)$/;"	f	struct:xpath_parser
throw_error_oom	include/pugixml.cpp	/^		void throw_error_oom()$/;"	f	struct:xpath_parser
tolower_ascii	include/pugixml.cpp	/^	PUGI__FN char_t tolower_ascii(char_t ch)$/;"	f
translate	include/pugixml.cpp	/^	PUGI__FN void translate(char_t* buffer, const char_t* from, const char_t* to)$/;"	f
traverse	include/pugixml.cpp	/^	PUGI__FN bool xml_node::traverse(xml_tree_walker& walker)$/;"	f	class:pugi::xml_node
truncate	include/pugixml.cpp	/^		void truncate(xpath_node* pos)$/;"	f	class:xpath_node_set_raw
truncate_zeros	include/pugixml.cpp	/^	PUGI__FN void truncate_zeros(char* begin, char* end)$/;"	f
type	include/pugixml.cpp	/^		typedef uint16_t type;$/;"	t	struct:wchar_selector	file:
type	include/pugixml.cpp	/^		typedef uint32_t type;$/;"	t	struct:wchar_selector	file:
type	include/pugixml.cpp	/^		xpath_node_set::type_t type() const$/;"	f	class:xpath_node_set_raw
type	include/pugixml.cpp	/^	PUGI__FN xml_node_type xml_node::type() const$/;"	f	class:pugi::xml_node
type	include/pugixml.cpp	/^	PUGI__FN xpath_node_set::type_t xpath_node_set::type() const$/;"	f	class:pugi::xpath_node_set
type	include/pugixml.cpp	/^	PUGI__FN xpath_value_type xpath_variable::type() const$/;"	f	class:pugi::xpath_variable
unique	include/pugixml.cpp	/^	template <typename I> I unique(I begin, I end)$/;"	f
unspecified_bool_xml_attribute	include/pugixml.cpp	/^	PUGI__FN static void unspecified_bool_xml_attribute(xml_attribute***)$/;"	f	namespace:pugi
unspecified_bool_xml_node	include/pugixml.cpp	/^	PUGI__FN static void unspecified_bool_xml_node(xml_node***)$/;"	f	namespace:pugi
unspecified_bool_xml_text	include/pugixml.cpp	/^	PUGI__FN static void unspecified_bool_xml_text(xml_text***)$/;"	f	namespace:pugi
unspecified_bool_xpath_node	include/pugixml.cpp	/^	PUGI__FN static void unspecified_bool_xpath_node(xpath_node***)$/;"	f	namespace:pugi
unspecified_bool_xpath_query	include/pugixml.cpp	/^	PUGI__FN static void unspecified_bool_xpath_query(xpath_query***)$/;"	f	namespace:pugi
uses_heap	include/pugixml.cpp	/^		bool uses_heap() const$/;"	f	class:xpath_string
utf16_counter	include/pugixml.cpp	/^	struct utf16_counter$/;"	s	file:
utf16_writer	include/pugixml.cpp	/^	struct utf16_writer$/;"	s	file:
utf32_counter	include/pugixml.cpp	/^	struct utf32_counter$/;"	s	file:
utf32_writer	include/pugixml.cpp	/^	struct utf32_writer$/;"	s	file:
utf8_counter	include/pugixml.cpp	/^	struct utf8_counter$/;"	s	file:
utf8_writer	include/pugixml.cpp	/^	struct utf8_writer$/;"	s	file:
utf_decoder	include/pugixml.cpp	/^	template <typename Traits, typename opt_swap = opt_false> struct utf_decoder$/;"	s	file:
value	include/pugixml.cpp	/^		bool value;$/;"	m	struct:xpath_variable_boolean	file:
value	include/pugixml.cpp	/^		char_t*					value;					\/\/\/< Pointer to any associated string data.$/;"	m	struct:pugi::xml_node_struct	file:
value	include/pugixml.cpp	/^		char_t*	value;	\/\/\/< Pointer to attribute value.$/;"	m	struct:pugi::xml_attribute_struct	file:
value	include/pugixml.cpp	/^		char_t* value;$/;"	m	struct:xpath_variable_string	file:
value	include/pugixml.cpp	/^		double value;$/;"	m	struct:xpath_variable_number	file:
value	include/pugixml.cpp	/^		enum { value = 0 };$/;"	e	enum:opt_false::__anon1	file:
value	include/pugixml.cpp	/^		enum { value = 1 };$/;"	e	enum:opt_true::__anon2	file:
value	include/pugixml.cpp	/^		xpath_node_set value;$/;"	m	struct:xpath_variable_node_set	file:
value	include/pugixml.cpp	/^	PUGI__FN const char_t* xml_attribute::value() const$/;"	f	class:pugi::xml_attribute
value	include/pugixml.cpp	/^	PUGI__FN const char_t* xml_node::value() const$/;"	f	class:pugi::xml_node
value_type	include/pugixml.cpp	/^		typedef size_t value_type;$/;"	t	struct:utf16_counter	file:
value_type	include/pugixml.cpp	/^		typedef size_t value_type;$/;"	t	struct:utf32_counter	file:
value_type	include/pugixml.cpp	/^		typedef size_t value_type;$/;"	t	struct:utf8_counter	file:
value_type	include/pugixml.cpp	/^		typedef uint16_t* value_type;$/;"	t	struct:utf16_writer	file:
value_type	include/pugixml.cpp	/^		typedef uint32_t* value_type;$/;"	t	struct:utf32_writer	file:
value_type	include/pugixml.cpp	/^		typedef uint8_t* value_type;$/;"	t	struct:latin1_writer	file:
value_type	include/pugixml.cpp	/^		typedef uint8_t* value_type;$/;"	t	struct:utf8_writer	file:
variable	include/pugixml.cpp	/^			xpath_variable* variable;$/;"	m	union:xpath_ast_node::__anon5	file:
wchar_counter	include/pugixml.cpp	/^	typedef wchar_selector<sizeof(wchar_t)>::counter wchar_counter;$/;"	t	file:
wchar_selector	include/pugixml.cpp	/^	template <> struct wchar_selector<2>$/;"	s	file:
wchar_selector	include/pugixml.cpp	/^	template <> struct wchar_selector<4>$/;"	s	file:
wchar_writer	include/pugixml.cpp	/^	typedef wchar_selector<sizeof(wchar_t)>::writer wchar_writer;$/;"	t	file:
what	include/pugixml.cpp	/^	PUGI__FN const char* xpath_exception::what() const throw()$/;"	f	class:pugi::xpath_exception
widen_ascii	include/pugixml.cpp	/^	PUGI__FN void widen_ascii(wchar_t* dest, const char* source)$/;"	f
write	include/pugixml.cpp	/^		void write(char_t d0)$/;"	f	class:xml_buffered_writer
write	include/pugixml.cpp	/^		void write(char_t d0, char_t d1)$/;"	f	class:xml_buffered_writer
write	include/pugixml.cpp	/^		void write(char_t d0, char_t d1, char_t d2)$/;"	f	class:xml_buffered_writer
write	include/pugixml.cpp	/^		void write(char_t d0, char_t d1, char_t d2, char_t d3)$/;"	f	class:xml_buffered_writer
write	include/pugixml.cpp	/^		void write(char_t d0, char_t d1, char_t d2, char_t d3, char_t d4)$/;"	f	class:xml_buffered_writer
write	include/pugixml.cpp	/^		void write(char_t d0, char_t d1, char_t d2, char_t d3, char_t d4, char_t d5)$/;"	f	class:xml_buffered_writer
write	include/pugixml.cpp	/^		void write(const char_t* data)$/;"	f	class:xml_buffered_writer
write	include/pugixml.cpp	/^		void write(const char_t* data, size_t length)$/;"	f	class:xml_buffered_writer
write	include/pugixml.cpp	/^	PUGI__FN void xml_writer_file::write(const void* data, size_t size)$/;"	f	class:pugi::xml_writer_file
write	include/pugixml.cpp	/^	PUGI__FN void xml_writer_stream::write(const void* data, size_t size)$/;"	f	class:pugi::xml_writer_stream
writer	include/pugixml.cpp	/^		typedef utf16_writer writer;$/;"	t	struct:wchar_selector	file:
writer	include/pugixml.cpp	/^		typedef utf32_writer writer;$/;"	t	struct:wchar_selector	file:
writer	include/pugixml.cpp	/^		xml_writer& writer;$/;"	m	class:xml_buffered_writer	file:
xml_allocator	include/pugixml.cpp	/^		xml_allocator(xml_memory_page* root): _root(root), _busy_size(root->busy_size)$/;"	f	struct:xml_allocator
xml_allocator	include/pugixml.cpp	/^	struct xml_allocator$/;"	s	file:
xml_attribute	include/pugixml.cpp	/^	PUGI__FN xml_attribute::xml_attribute(): _attr(0)$/;"	f	class:pugi::xml_attribute
xml_attribute	include/pugixml.cpp	/^	PUGI__FN xml_attribute::xml_attribute(xml_attribute_struct* attr): _attr(attr)$/;"	f	class:pugi::xml_attribute
xml_attribute_iterator	include/pugixml.cpp	/^	PUGI__FN xml_attribute_iterator::xml_attribute_iterator()$/;"	f	class:pugi::xml_attribute_iterator
xml_attribute_iterator	include/pugixml.cpp	/^	PUGI__FN xml_attribute_iterator::xml_attribute_iterator(const xml_attribute& attr, const xml_node& parent): _wrap(attr), _parent(parent)$/;"	f	class:pugi::xml_attribute_iterator
xml_attribute_iterator	include/pugixml.cpp	/^	PUGI__FN xml_attribute_iterator::xml_attribute_iterator(xml_attribute_struct* ref, xml_node_struct* parent): _wrap(ref), _parent(parent)$/;"	f	class:pugi::xml_attribute_iterator
xml_attribute_struct	include/pugixml.cpp	/^		xml_attribute_struct(impl::xml_memory_page* page): header(reinterpret_cast<uintptr_t>(page)), name(0), value(0), prev_attribute_c(0), next_attribute(0)$/;"	f	struct:pugi::xml_attribute_struct
xml_attribute_struct	include/pugixml.cpp	/^	struct xml_attribute_struct$/;"	s	namespace:pugi	file:
xml_buffered_writer	include/pugixml.cpp	/^		xml_buffered_writer(xml_writer& writer_, xml_encoding user_encoding): writer(writer_), bufsize(0), encoding(get_write_encoding(user_encoding))$/;"	f	class:xml_buffered_writer
xml_buffered_writer	include/pugixml.cpp	/^	class xml_buffered_writer$/;"	c	file:
xml_document	include/pugixml.cpp	/^	PUGI__FN xml_document::xml_document(): _buffer(0)$/;"	f	class:pugi::xml_document
xml_document_struct	include/pugixml.cpp	/^		xml_document_struct(xml_memory_page* page): xml_node_struct(page, node_document), xml_allocator(page), buffer(0)$/;"	f	struct:xml_document_struct
xml_document_struct	include/pugixml.cpp	/^	struct xml_document_struct: public xml_node_struct, public xml_allocator$/;"	s	file:
xml_memory	include/pugixml.cpp	/^	typedef xml_memory_management_function_storage<int> xml_memory;$/;"	t	file:
xml_memory_management_function_storage	include/pugixml.cpp	/^	struct xml_memory_management_function_storage$/;"	s	file:
xml_memory_page	include/pugixml.cpp	/^	struct xml_memory_page$/;"	s	file:
xml_memory_page_alignment	include/pugixml.cpp	/^	static const uintptr_t xml_memory_page_alignment = 32;$/;"	v	file:
xml_memory_page_name_allocated_mask	include/pugixml.cpp	/^	static const uintptr_t xml_memory_page_name_allocated_mask = 16;$/;"	v	file:
xml_memory_page_pointer_mask	include/pugixml.cpp	/^	static const uintptr_t xml_memory_page_pointer_mask = ~(xml_memory_page_alignment - 1);$/;"	v	file:
xml_memory_page_size	include/pugixml.cpp	/^	static const size_t xml_memory_page_size =$/;"	v	file:
xml_memory_page_type_mask	include/pugixml.cpp	/^	static const uintptr_t xml_memory_page_type_mask = 7;$/;"	v	file:
xml_memory_page_value_allocated_mask	include/pugixml.cpp	/^	static const uintptr_t xml_memory_page_value_allocated_mask = 8;$/;"	v	file:
xml_memory_string_header	include/pugixml.cpp	/^	struct xml_memory_string_header$/;"	s	file:
xml_named_node_iterator	include/pugixml.cpp	/^	PUGI__FN xml_named_node_iterator::xml_named_node_iterator(): _name(0)$/;"	f	class:pugi::xml_named_node_iterator
xml_named_node_iterator	include/pugixml.cpp	/^	PUGI__FN xml_named_node_iterator::xml_named_node_iterator(const xml_node& node, const char_t* name): _node(node), _name(name)$/;"	f	class:pugi::xml_named_node_iterator
xml_node	include/pugixml.cpp	/^	PUGI__FN xml_node::xml_node(): _root(0)$/;"	f	class:pugi::xml_node
xml_node	include/pugixml.cpp	/^	PUGI__FN xml_node::xml_node(xml_node_struct* p): _root(p)$/;"	f	class:pugi::xml_node
xml_node_iterator	include/pugixml.cpp	/^	PUGI__FN xml_node_iterator::xml_node_iterator()$/;"	f	class:pugi::xml_node_iterator
xml_node_iterator	include/pugixml.cpp	/^	PUGI__FN xml_node_iterator::xml_node_iterator(const xml_node& node): _wrap(node), _parent(node.parent())$/;"	f	class:pugi::xml_node_iterator
xml_node_iterator	include/pugixml.cpp	/^	PUGI__FN xml_node_iterator::xml_node_iterator(xml_node_struct* ref, xml_node_struct* parent): _wrap(ref), _parent(parent)$/;"	f	class:pugi::xml_node_iterator
xml_node_struct	include/pugixml.cpp	/^		xml_node_struct(impl::xml_memory_page* page, xml_node_type type): header(reinterpret_cast<uintptr_t>(page) | (type - 1)), parent(0), name(0), value(0), first_child(0), prev_sibling_c(0), next_sibling(0), first_attribute(0)$/;"	f	struct:pugi::xml_node_struct
xml_node_struct	include/pugixml.cpp	/^	struct xml_node_struct$/;"	s	namespace:pugi	file:
xml_parse_result	include/pugixml.cpp	/^	PUGI__FN xml_parse_result::xml_parse_result(): status(status_internal_error), offset(0), encoding(encoding_auto)$/;"	f	class:pugi::xml_parse_result
xml_parser	include/pugixml.cpp	/^		xml_parser(const xml_allocator& alloc_): alloc(alloc_), error_offset(0), error_status(status_ok)$/;"	f	struct:xml_parser
xml_parser	include/pugixml.cpp	/^	struct xml_parser$/;"	s	file:
xml_stream_chunk	include/pugixml.cpp	/^		xml_stream_chunk(): next(0), size(0)$/;"	f	struct:xml_stream_chunk
xml_stream_chunk	include/pugixml.cpp	/^	template <typename T> struct xml_stream_chunk$/;"	s	file:
xml_text	include/pugixml.cpp	/^	PUGI__FN xml_text::xml_text(): _root(0)$/;"	f	class:pugi::xml_text
xml_text	include/pugixml.cpp	/^	PUGI__FN xml_text::xml_text(xml_node_struct* root): _root(root)$/;"	f	class:pugi::xml_text
xml_tree_walker	include/pugixml.cpp	/^	PUGI__FN xml_tree_walker::xml_tree_walker(): _depth(0)$/;"	f	class:pugi::xml_tree_walker
xml_writer_file	include/pugixml.cpp	/^	PUGI__FN xml_writer_file::xml_writer_file(void* file_): file(file_)$/;"	f	class:pugi::xml_writer_file
xml_writer_stream	include/pugixml.cpp	/^	PUGI__FN xml_writer_stream::xml_writer_stream(std::basic_ostream<char, std::char_traits<char> >& stream): narrow_stream(&stream), wide_stream(0)$/;"	f	class:pugi::xml_writer_stream
xml_writer_stream	include/pugixml.cpp	/^	PUGI__FN xml_writer_stream::xml_writer_stream(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& stream): narrow_stream(0), wide_stream(&stream)$/;"	f	class:pugi::xml_writer_stream
xpath_allocator	include/pugixml.cpp	/^		xpath_allocator(xpath_memory_block* root, size_t root_size = 0): _root(root), _root_size(root_size)$/;"	f	class:xpath_allocator
xpath_allocator	include/pugixml.cpp	/^	class xpath_allocator$/;"	c	file:
xpath_allocator_capture	include/pugixml.cpp	/^		xpath_allocator_capture(xpath_allocator* alloc): _target(alloc), _state(*alloc)$/;"	f	struct:xpath_allocator_capture
xpath_allocator_capture	include/pugixml.cpp	/^	struct xpath_allocator_capture$/;"	s	file:
xpath_ast_node	include/pugixml.cpp	/^		xpath_ast_node(ast_type_t type, xpath_ast_node* left, axis_t axis, nodetest_t test, const char_t* contents):$/;"	f	class:xpath_ast_node
xpath_ast_node	include/pugixml.cpp	/^		xpath_ast_node(ast_type_t type, xpath_value_type rettype_, const char_t* value):$/;"	f	class:xpath_ast_node
xpath_ast_node	include/pugixml.cpp	/^		xpath_ast_node(ast_type_t type, xpath_value_type rettype_, double value):$/;"	f	class:xpath_ast_node
xpath_ast_node	include/pugixml.cpp	/^		xpath_ast_node(ast_type_t type, xpath_value_type rettype_, xpath_ast_node* left = 0, xpath_ast_node* right = 0):$/;"	f	class:xpath_ast_node
xpath_ast_node	include/pugixml.cpp	/^		xpath_ast_node(ast_type_t type, xpath_value_type rettype_, xpath_variable* value):$/;"	f	class:xpath_ast_node
xpath_ast_node	include/pugixml.cpp	/^	class xpath_ast_node$/;"	c	file:
xpath_context	include/pugixml.cpp	/^		xpath_context(const xpath_node& n_, size_t position_, size_t size_): n(n_), position(position_), size(size_)$/;"	f	struct:xpath_context
xpath_context	include/pugixml.cpp	/^	struct xpath_context$/;"	s	file:
xpath_exception	include/pugixml.cpp	/^	PUGI__FN xpath_exception::xpath_exception(const xpath_parse_result& result_): _result(result_)$/;"	f	class:pugi::xpath_exception
xpath_first	include/pugixml.cpp	/^	PUGI__FN xpath_node xpath_first(const xpath_node* begin, const xpath_node* end, xpath_node_set::type_t type)$/;"	f
xpath_lexer	include/pugixml.cpp	/^		explicit xpath_lexer(const char_t* query): _cur(query)$/;"	f	class:xpath_lexer
xpath_lexer	include/pugixml.cpp	/^	class xpath_lexer$/;"	c	file:
xpath_lexer_string	include/pugixml.cpp	/^		xpath_lexer_string(): begin(0), end(0)$/;"	f	struct:xpath_lexer_string
xpath_lexer_string	include/pugixml.cpp	/^	struct xpath_lexer_string$/;"	s	file:
xpath_memory_block	include/pugixml.cpp	/^	struct xpath_memory_block$/;"	s	file:
xpath_node	include/pugixml.cpp	/^	PUGI__FN xpath_node::xpath_node()$/;"	f	class:pugi::xpath_node
xpath_node	include/pugixml.cpp	/^	PUGI__FN xpath_node::xpath_node(const xml_attribute& attribute_, const xml_node& parent_): _node(attribute_ ? parent_ : xml_node()), _attribute(attribute_)$/;"	f	class:pugi::xpath_node
xpath_node	include/pugixml.cpp	/^	PUGI__FN xpath_node::xpath_node(const xml_node& node_): _node(node_)$/;"	f	class:pugi::xpath_node
xpath_node_set	include/pugixml.cpp	/^	PUGI__FN xpath_node_set::xpath_node_set(): _type(type_unsorted), _begin(&_storage), _end(&_storage)$/;"	f	class:pugi::xpath_node_set
xpath_node_set	include/pugixml.cpp	/^	PUGI__FN xpath_node_set::xpath_node_set(const xpath_node_set& ns): _type(ns._type), _begin(&_storage), _end(&_storage)$/;"	f	class:pugi::xpath_node_set
xpath_node_set	include/pugixml.cpp	/^	PUGI__FN xpath_node_set::xpath_node_set(const_iterator begin_, const_iterator end_, type_t type_): _type(type_), _begin(&_storage), _end(&_storage)$/;"	f	class:pugi::xpath_node_set
xpath_node_set_raw	include/pugixml.cpp	/^		xpath_node_set_raw(): _type(xpath_node_set::type_unsorted), _begin(0), _end(0), _eos(0)$/;"	f	class:xpath_node_set_raw
xpath_node_set_raw	include/pugixml.cpp	/^	class xpath_node_set_raw$/;"	c	file:
xpath_parse_result	include/pugixml.cpp	/^	PUGI__FN xpath_parse_result::xpath_parse_result(): error("Internal error"), offset(0)$/;"	f	class:pugi::xpath_parse_result
xpath_parser	include/pugixml.cpp	/^		xpath_parser(const char_t* query, xpath_variable_set* variables, xpath_allocator* alloc, xpath_parse_result* result): _alloc(alloc), _lexer(query), _query(query), _variables(variables), _result(result)$/;"	f	struct:xpath_parser
xpath_parser	include/pugixml.cpp	/^	struct xpath_parser$/;"	s	file:
xpath_query	include/pugixml.cpp	/^	PUGI__FN xpath_query::xpath_query(const char_t* query, xpath_variable_set* variables): _impl(0)$/;"	f	class:pugi::xpath_query
xpath_query_impl	include/pugixml.cpp	/^		xpath_query_impl(): root(0), alloc(&block)$/;"	f	struct:xpath_query_impl
xpath_query_impl	include/pugixml.cpp	/^	struct xpath_query_impl$/;"	s	file:
xpath_sort	include/pugixml.cpp	/^	PUGI__FN xpath_node_set::type_t xpath_sort(xpath_node* begin, xpath_node* end, xpath_node_set::type_t type, bool rev)$/;"	f
xpath_stack	include/pugixml.cpp	/^	struct xpath_stack$/;"	s	file:
xpath_stack_data	include/pugixml.cpp	/^		xpath_stack_data(): result(blocks + 0), temp(blocks + 1)$/;"	f	struct:xpath_stack_data
xpath_stack_data	include/pugixml.cpp	/^	struct xpath_stack_data$/;"	s	file:
xpath_string	include/pugixml.cpp	/^		explicit xpath_string(const char_t* str, bool use_heap): _buffer(str), _uses_heap(use_heap)$/;"	f	class:xpath_string
xpath_string	include/pugixml.cpp	/^		explicit xpath_string(const char_t* str, xpath_allocator* alloc)$/;"	f	class:xpath_string
xpath_string	include/pugixml.cpp	/^		xpath_string(): _buffer(PUGIXML_TEXT("")), _uses_heap(false)$/;"	f	class:xpath_string
xpath_string	include/pugixml.cpp	/^		xpath_string(const char_t* begin, const char_t* end, xpath_allocator* alloc)$/;"	f	class:xpath_string
xpath_string	include/pugixml.cpp	/^	class xpath_string$/;"	c	file:
xpath_string_const	include/pugixml.cpp	/^	PUGI__FN xpath_string xpath_string_const(const char_t* str)$/;"	f
xpath_variable	include/pugixml.cpp	/^	PUGI__FN xpath_variable::xpath_variable()$/;"	f	class:pugi::xpath_variable
xpath_variable_boolean	include/pugixml.cpp	/^		xpath_variable_boolean(): value(false)$/;"	f	struct:xpath_variable_boolean
xpath_variable_boolean	include/pugixml.cpp	/^	struct xpath_variable_boolean: xpath_variable$/;"	s	file:
xpath_variable_node_set	include/pugixml.cpp	/^	struct xpath_variable_node_set: xpath_variable$/;"	s	file:
xpath_variable_number	include/pugixml.cpp	/^		xpath_variable_number(): value(0)$/;"	f	struct:xpath_variable_number
xpath_variable_number	include/pugixml.cpp	/^	struct xpath_variable_number: xpath_variable$/;"	s	file:
xpath_variable_set	include/pugixml.cpp	/^	PUGI__FN xpath_variable_set::xpath_variable_set()$/;"	f	class:pugi::xpath_variable_set
xpath_variable_string	include/pugixml.cpp	/^		xpath_variable_string(): value(0)$/;"	f	struct:xpath_variable_string
xpath_variable_string	include/pugixml.cpp	/^	struct xpath_variable_string: xpath_variable$/;"	s	file:
~buffer_holder	include/pugixml.cpp	/^		~buffer_holder()$/;"	f	struct:buffer_holder
~xml_buffered_writer	include/pugixml.cpp	/^		~xml_buffered_writer()$/;"	f	class:xml_buffered_writer
~xml_document	include/pugixml.cpp	/^	PUGI__FN xml_document::~xml_document()$/;"	f	class:pugi::xml_document
~xml_tree_walker	include/pugixml.cpp	/^	PUGI__FN xml_tree_walker::~xml_tree_walker()$/;"	f	class:pugi::xml_tree_walker
~xpath_allocator_capture	include/pugixml.cpp	/^		~xpath_allocator_capture()$/;"	f	struct:xpath_allocator_capture
~xpath_node_set	include/pugixml.cpp	/^	PUGI__FN xpath_node_set::~xpath_node_set()$/;"	f	class:pugi::xpath_node_set
~xpath_query	include/pugixml.cpp	/^	PUGI__FN xpath_query::~xpath_query()$/;"	f	class:pugi::xpath_query
~xpath_stack_data	include/pugixml.cpp	/^		~xpath_stack_data()$/;"	f	struct:xpath_stack_data
~xpath_variable_set	include/pugixml.cpp	/^	PUGI__FN xpath_variable_set::~xpath_variable_set()$/;"	f	class:pugi::xpath_variable_set
~xpath_variable_string	include/pugixml.cpp	/^		~xpath_variable_string()$/;"	f	struct:xpath_variable_string
HEADER_PUGIXML_HPP	include/pugixml.hpp	/^#define HEADER_PUGIXML_HPP$/;"	d
PUGIXML_API	include/pugixml.hpp	/^#	define PUGIXML_API$/;"	d
PUGIXML_CHAR	include/pugixml.hpp	/^#	define PUGIXML_CHAR /;"	d
PUGIXML_CLASS	include/pugixml.hpp	/^#	define PUGIXML_CLASS /;"	d
PUGIXML_DEPRECATED	include/pugixml.hpp	/^#		define PUGIXML_DEPRECATED /;"	d
PUGIXML_DEPRECATED	include/pugixml.hpp	/^#		define PUGIXML_DEPRECATED$/;"	d
PUGIXML_FUNCTION	include/pugixml.hpp	/^#	define PUGIXML_FUNCTION /;"	d
PUGIXML_TEXT	include/pugixml.hpp	/^#	define PUGIXML_TEXT(/;"	d
PUGIXML_VERSION	include/pugixml.hpp	/^#	define PUGIXML_VERSION /;"	d
_attr	include/pugixml.hpp	/^		xml_attribute_struct* _attr;$/;"	m	class:pugi::xml_attribute
_attribute	include/pugixml.hpp	/^		xml_attribute _attribute;$/;"	m	class:pugi::xpath_node
_begin	include/pugixml.hpp	/^		It _begin, _end;$/;"	m	class:pugi::xml_object_range
_begin	include/pugixml.hpp	/^		xpath_node* _begin;$/;"	m	class:pugi::xpath_node_set
_buffer	include/pugixml.hpp	/^		char_t* _buffer;$/;"	m	class:pugi::xml_document
_data	include/pugixml.hpp	/^		xpath_variable* _data[64];$/;"	m	class:pugi::xpath_variable_set
_depth	include/pugixml.hpp	/^		int _depth;$/;"	m	class:pugi::xml_tree_walker
_end	include/pugixml.hpp	/^		It _begin, _end;$/;"	m	class:pugi::xml_object_range
_end	include/pugixml.hpp	/^		xpath_node* _end;$/;"	m	class:pugi::xpath_node_set
_impl	include/pugixml.hpp	/^		void* _impl;$/;"	m	class:pugi::xpath_query
_memory	include/pugixml.hpp	/^		char _memory[192];$/;"	m	class:pugi::xml_document
_name	include/pugixml.hpp	/^		const char_t* _name;$/;"	m	class:pugi::xml_named_node_iterator
_next	include/pugixml.hpp	/^		xpath_variable* _next;$/;"	m	class:pugi::xpath_variable
_node	include/pugixml.hpp	/^		mutable xml_node _node;$/;"	m	class:pugi::xml_named_node_iterator
_node	include/pugixml.hpp	/^		xml_node _node;$/;"	m	class:pugi::xpath_node
_parent	include/pugixml.hpp	/^		xml_node _parent;$/;"	m	class:pugi::xml_attribute_iterator
_parent	include/pugixml.hpp	/^		xml_node _parent;$/;"	m	class:pugi::xml_node_iterator
_result	include/pugixml.hpp	/^		xpath_parse_result _result;$/;"	m	class:pugi::xpath_exception
_result	include/pugixml.hpp	/^		xpath_parse_result _result;$/;"	m	class:pugi::xpath_query
_root	include/pugixml.hpp	/^		xml_node_struct* _root;$/;"	m	class:pugi::xml_node
_root	include/pugixml.hpp	/^		xml_node_struct* _root;$/;"	m	class:pugi::xml_text
_storage	include/pugixml.hpp	/^		xpath_node _storage;$/;"	m	class:pugi::xpath_node_set
_type	include/pugixml.hpp	/^		type_t _type;$/;"	m	class:pugi::xpath_node_set
_type	include/pugixml.hpp	/^		xpath_value_type _type;$/;"	m	class:pugi::xpath_variable
_wrap	include/pugixml.hpp	/^		mutable xml_attribute _wrap;$/;"	m	class:pugi::xml_attribute_iterator
_wrap	include/pugixml.hpp	/^		mutable xml_node _wrap;$/;"	m	class:pugi::xml_node_iterator
allocation_function	include/pugixml.hpp	/^	typedef void* (*allocation_function)(size_t size);$/;"	t	namespace:pugi
attribute_iterator	include/pugixml.hpp	/^		typedef xml_attribute_iterator attribute_iterator;$/;"	t	class:pugi::xml_node
begin	include/pugixml.hpp	/^		It begin() const { return _begin; }$/;"	f	class:pugi::xml_object_range
char_t	include/pugixml.hpp	/^	typedef PUGIXML_CHAR char_t;$/;"	t	namespace:pugi
const_iterator	include/pugixml.hpp	/^		typedef It const_iterator;$/;"	t	class:pugi::xml_object_range
const_iterator	include/pugixml.hpp	/^		typedef const xpath_node* const_iterator;$/;"	t	class:pugi::xpath_node_set
deallocation_function	include/pugixml.hpp	/^	typedef void (*deallocation_function)(void* ptr);$/;"	t	namespace:pugi
difference_type	include/pugixml.hpp	/^		typedef ptrdiff_t difference_type;$/;"	t	class:pugi::xml_attribute_iterator
difference_type	include/pugixml.hpp	/^		typedef ptrdiff_t difference_type;$/;"	t	class:pugi::xml_named_node_iterator
difference_type	include/pugixml.hpp	/^		typedef ptrdiff_t difference_type;$/;"	t	class:pugi::xml_node_iterator
encoding	include/pugixml.hpp	/^		xml_encoding encoding;$/;"	m	struct:pugi::xml_parse_result
encoding_auto	include/pugixml.hpp	/^		encoding_auto,		\/\/ Auto-detect input encoding using BOM or < \/ <? detection; use UTF8 if BOM is not found$/;"	e	enum:pugi::xml_encoding
encoding_latin1	include/pugixml.hpp	/^		encoding_latin1$/;"	e	enum:pugi::xml_encoding
encoding_utf16	include/pugixml.hpp	/^		encoding_utf16,		\/\/ UTF16 with native endianness$/;"	e	enum:pugi::xml_encoding
encoding_utf16_be	include/pugixml.hpp	/^		encoding_utf16_be,	\/\/ Big-endian UTF16$/;"	e	enum:pugi::xml_encoding
encoding_utf16_le	include/pugixml.hpp	/^		encoding_utf16_le,	\/\/ Little-endian UTF16$/;"	e	enum:pugi::xml_encoding
encoding_utf32	include/pugixml.hpp	/^		encoding_utf32,		\/\/ UTF32 with native endianness$/;"	e	enum:pugi::xml_encoding
encoding_utf32_be	include/pugixml.hpp	/^		encoding_utf32_be,	\/\/ Big-endian UTF32$/;"	e	enum:pugi::xml_encoding
encoding_utf32_le	include/pugixml.hpp	/^		encoding_utf32_le,	\/\/ Little-endian UTF32$/;"	e	enum:pugi::xml_encoding
encoding_utf8	include/pugixml.hpp	/^		encoding_utf8,		\/\/ UTF8 encoding$/;"	e	enum:pugi::xml_encoding
encoding_wchar	include/pugixml.hpp	/^		encoding_wchar,		\/\/ The same encoding wchar_t has (either UTF16 or UTF32)$/;"	e	enum:pugi::xml_encoding
end	include/pugixml.hpp	/^		It end() const { return _end; }$/;"	f	class:pugi::xml_object_range
error	include/pugixml.hpp	/^		const char* error;$/;"	m	struct:pugi::xpath_parse_result
file	include/pugixml.hpp	/^		void* file;$/;"	m	class:pugi::xml_writer_file
find_attribute	include/pugixml.hpp	/^		template <typename Predicate> xml_attribute find_attribute(Predicate pred) const$/;"	f	class:pugi::xml_node
find_child	include/pugixml.hpp	/^		template <typename Predicate> xml_node find_child(Predicate pred) const$/;"	f	class:pugi::xml_node
find_node	include/pugixml.hpp	/^		template <typename Predicate> xml_node find_node(Predicate pred) const$/;"	f	class:pugi::xml_node
format_default	include/pugixml.hpp	/^	const unsigned int format_default = format_indent;$/;"	m	namespace:pugi
format_indent	include/pugixml.hpp	/^	const unsigned int format_indent = 0x01;$/;"	m	namespace:pugi
format_no_declaration	include/pugixml.hpp	/^	const unsigned int format_no_declaration = 0x08;$/;"	m	namespace:pugi
format_no_escapes	include/pugixml.hpp	/^	const unsigned int format_no_escapes = 0x10;$/;"	m	namespace:pugi
format_raw	include/pugixml.hpp	/^	const unsigned int format_raw = 0x04;$/;"	m	namespace:pugi
format_save_file_text	include/pugixml.hpp	/^	const unsigned int format_save_file_text = 0x20;$/;"	m	namespace:pugi
format_write_bom	include/pugixml.hpp	/^	const unsigned int format_write_bom = 0x02;$/;"	m	namespace:pugi
iterator	include/pugixml.hpp	/^		typedef xml_node_iterator iterator;$/;"	t	class:pugi::xml_node
iterator_category	include/pugixml.hpp	/^		typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:pugi::xml_attribute_iterator
iterator_category	include/pugixml.hpp	/^		typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:pugi::xml_node_iterator
iterator_category	include/pugixml.hpp	/^		typedef std::forward_iterator_tag iterator_category;$/;"	t	class:pugi::xml_named_node_iterator
narrow_stream	include/pugixml.hpp	/^		std::basic_ostream<char, std::char_traits<char> >* narrow_stream;$/;"	m	class:pugi::xml_writer_stream
node_cdata	include/pugixml.hpp	/^		node_cdata,			\/\/ Character data, i.e. '<![CDATA[text]]>'$/;"	e	enum:pugi::xml_node_type
node_comment	include/pugixml.hpp	/^		node_comment,		\/\/ Comment tag, i.e. '<!-- text -->'$/;"	e	enum:pugi::xml_node_type
node_declaration	include/pugixml.hpp	/^		node_declaration,	\/\/ Document declaration, i.e. '<?xml version="1.0"?>'$/;"	e	enum:pugi::xml_node_type
node_doctype	include/pugixml.hpp	/^		node_doctype		\/\/ Document type declaration, i.e. '<!DOCTYPE doc>'$/;"	e	enum:pugi::xml_node_type
node_document	include/pugixml.hpp	/^		node_document,		\/\/ A document tree's absolute root$/;"	e	enum:pugi::xml_node_type
node_element	include/pugixml.hpp	/^		node_element,		\/\/ Element tag, i.e. '<node\/>'$/;"	e	enum:pugi::xml_node_type
node_null	include/pugixml.hpp	/^		node_null,			\/\/ Empty (null) node handle$/;"	e	enum:pugi::xml_node_type
node_pcdata	include/pugixml.hpp	/^		node_pcdata,		\/\/ Plain character data, i.e. 'text'$/;"	e	enum:pugi::xml_node_type
node_pi	include/pugixml.hpp	/^		node_pi,			\/\/ Processing instruction, i.e. '<?name?>'$/;"	e	enum:pugi::xml_node_type
offset	include/pugixml.hpp	/^		ptrdiff_t offset;$/;"	m	struct:pugi::xml_parse_result
offset	include/pugixml.hpp	/^		ptrdiff_t offset;$/;"	m	struct:pugi::xpath_parse_result
parse_cdata	include/pugixml.hpp	/^	const unsigned int parse_cdata = 0x0004;$/;"	m	namespace:pugi
parse_comments	include/pugixml.hpp	/^	const unsigned int parse_comments = 0x0002;$/;"	m	namespace:pugi
parse_declaration	include/pugixml.hpp	/^	const unsigned int parse_declaration = 0x0100;$/;"	m	namespace:pugi
parse_default	include/pugixml.hpp	/^	const unsigned int parse_default = parse_cdata | parse_escapes | parse_wconv_attribute | parse_eol;$/;"	m	namespace:pugi
parse_doctype	include/pugixml.hpp	/^	const unsigned int parse_doctype = 0x0200;$/;"	m	namespace:pugi
parse_eol	include/pugixml.hpp	/^	const unsigned int parse_eol = 0x0020;$/;"	m	namespace:pugi
parse_escapes	include/pugixml.hpp	/^	const unsigned int parse_escapes = 0x0010;$/;"	m	namespace:pugi
parse_full	include/pugixml.hpp	/^	const unsigned int parse_full = parse_default | parse_pi | parse_comments | parse_declaration | parse_doctype;$/;"	m	namespace:pugi
parse_minimal	include/pugixml.hpp	/^	const unsigned int parse_minimal = 0x0000;$/;"	m	namespace:pugi
parse_pi	include/pugixml.hpp	/^	const unsigned int parse_pi = 0x0001;$/;"	m	namespace:pugi
parse_wconv_attribute	include/pugixml.hpp	/^	const unsigned int parse_wconv_attribute = 0x0040;$/;"	m	namespace:pugi
parse_wnorm_attribute	include/pugixml.hpp	/^	const unsigned int parse_wnorm_attribute = 0x0080;$/;"	m	namespace:pugi
parse_ws_pcdata	include/pugixml.hpp	/^	const unsigned int parse_ws_pcdata = 0x0008;$/;"	m	namespace:pugi
parse_ws_pcdata_single	include/pugixml.hpp	/^	const unsigned int parse_ws_pcdata_single = 0x0400;$/;"	m	namespace:pugi
pointer	include/pugixml.hpp	/^		typedef xml_attribute* pointer;$/;"	t	class:pugi::xml_attribute_iterator
pointer	include/pugixml.hpp	/^		typedef xml_node* pointer;$/;"	t	class:pugi::xml_named_node_iterator
pointer	include/pugixml.hpp	/^		typedef xml_node* pointer;$/;"	t	class:pugi::xml_node_iterator
pugi	include/pugixml.hpp	/^namespace pugi$/;"	n
reference	include/pugixml.hpp	/^		typedef xml_attribute& reference;$/;"	t	class:pugi::xml_attribute_iterator
reference	include/pugixml.hpp	/^		typedef xml_node& reference;$/;"	t	class:pugi::xml_named_node_iterator
reference	include/pugixml.hpp	/^		typedef xml_node& reference;$/;"	t	class:pugi::xml_node_iterator
status	include/pugixml.hpp	/^		xml_parse_status status;$/;"	m	struct:pugi::xml_parse_result
status_bad_attribute	include/pugixml.hpp	/^		status_bad_attribute,		\/\/ Parsing error occurred while parsing element attribute$/;"	e	enum:pugi::xml_parse_status
status_bad_cdata	include/pugixml.hpp	/^		status_bad_cdata,			\/\/ Parsing error occurred while parsing CDATA section$/;"	e	enum:pugi::xml_parse_status
status_bad_comment	include/pugixml.hpp	/^		status_bad_comment,			\/\/ Parsing error occurred while parsing comment$/;"	e	enum:pugi::xml_parse_status
status_bad_doctype	include/pugixml.hpp	/^		status_bad_doctype,			\/\/ Parsing error occurred while parsing document type declaration$/;"	e	enum:pugi::xml_parse_status
status_bad_end_element	include/pugixml.hpp	/^		status_bad_end_element,		\/\/ Parsing error occurred while parsing end element tag$/;"	e	enum:pugi::xml_parse_status
status_bad_pcdata	include/pugixml.hpp	/^		status_bad_pcdata,			\/\/ Parsing error occurred while parsing PCDATA section$/;"	e	enum:pugi::xml_parse_status
status_bad_pi	include/pugixml.hpp	/^		status_bad_pi,				\/\/ Parsing error occurred while parsing document declaration\/processing instruction$/;"	e	enum:pugi::xml_parse_status
status_bad_start_element	include/pugixml.hpp	/^		status_bad_start_element,	\/\/ Parsing error occurred while parsing start element tag$/;"	e	enum:pugi::xml_parse_status
status_end_element_mismatch	include/pugixml.hpp	/^		status_end_element_mismatch \/\/ There was a mismatch of start-end tags (closing tag had incorrect name, some tag was not closed or there was an excessive closing tag)$/;"	e	enum:pugi::xml_parse_status
status_file_not_found	include/pugixml.hpp	/^		status_file_not_found,		\/\/ File was not found during load_file()$/;"	e	enum:pugi::xml_parse_status
status_internal_error	include/pugixml.hpp	/^		status_internal_error,		\/\/ Internal error occurred$/;"	e	enum:pugi::xml_parse_status
status_io_error	include/pugixml.hpp	/^		status_io_error,			\/\/ Error reading from file\/stream$/;"	e	enum:pugi::xml_parse_status
status_ok	include/pugixml.hpp	/^		status_ok = 0,				\/\/ No error$/;"	e	enum:pugi::xml_parse_status
status_out_of_memory	include/pugixml.hpp	/^		status_out_of_memory,		\/\/ Could not allocate memory$/;"	e	enum:pugi::xml_parse_status
status_unrecognized_tag	include/pugixml.hpp	/^		status_unrecognized_tag,	\/\/ Parser could not determine tag type$/;"	e	enum:pugi::xml_parse_status
std	include/pugixml.hpp	/^namespace std$/;"	n
string_t	include/pugixml.hpp	/^	typedef std::basic_string<PUGIXML_CHAR, std::char_traits<PUGIXML_CHAR>, std::allocator<PUGIXML_CHAR> > string_t;$/;"	t	namespace:pugi
type_sorted	include/pugixml.hpp	/^			type_sorted,			\/\/ Sorted by document order (ascending)$/;"	e	enum:pugi::xpath_node_set::type_t
type_sorted_reverse	include/pugixml.hpp	/^			type_sorted_reverse		\/\/ Sorted by document order (descending)$/;"	e	enum:pugi::xpath_node_set::type_t
type_t	include/pugixml.hpp	/^		enum type_t$/;"	g	class:pugi::xpath_node_set
type_unsorted	include/pugixml.hpp	/^			type_unsorted,			\/\/ Not ordered$/;"	e	enum:pugi::xpath_node_set::type_t
unspecified_bool_type	include/pugixml.hpp	/^		typedef void (*unspecified_bool_type)(xml_attribute***);$/;"	t	class:pugi::xml_attribute
unspecified_bool_type	include/pugixml.hpp	/^		typedef void (*unspecified_bool_type)(xml_node***);$/;"	t	class:pugi::xml_node
unspecified_bool_type	include/pugixml.hpp	/^		typedef void (*unspecified_bool_type)(xml_text***);$/;"	t	class:pugi::xml_text
unspecified_bool_type	include/pugixml.hpp	/^		typedef void (*unspecified_bool_type)(xpath_node***);$/;"	t	class:pugi::xpath_node
unspecified_bool_type	include/pugixml.hpp	/^		typedef void (*unspecified_bool_type)(xpath_query***);$/;"	t	class:pugi::xpath_query
value_type	include/pugixml.hpp	/^		typedef xml_attribute value_type;$/;"	t	class:pugi::xml_attribute_iterator
value_type	include/pugixml.hpp	/^		typedef xml_node value_type;$/;"	t	class:pugi::xml_named_node_iterator
value_type	include/pugixml.hpp	/^		typedef xml_node value_type;$/;"	t	class:pugi::xml_node_iterator
wide_stream	include/pugixml.hpp	/^		std::basic_ostream<wchar_t, std::char_traits<wchar_t> >* wide_stream;$/;"	m	class:pugi::xml_writer_stream
xml_attribute	include/pugixml.hpp	/^	class PUGIXML_CLASS xml_attribute$/;"	c	namespace:pugi
xml_attribute_iterator	include/pugixml.hpp	/^	class PUGIXML_CLASS xml_attribute_iterator$/;"	c	namespace:pugi
xml_document	include/pugixml.hpp	/^	class PUGIXML_CLASS xml_document: public xml_node$/;"	c	namespace:pugi
xml_encoding	include/pugixml.hpp	/^	enum xml_encoding$/;"	g	namespace:pugi
xml_named_node_iterator	include/pugixml.hpp	/^	class xml_named_node_iterator$/;"	c	namespace:pugi
xml_node	include/pugixml.hpp	/^	class PUGIXML_CLASS xml_node$/;"	c	namespace:pugi
xml_node_iterator	include/pugixml.hpp	/^	class PUGIXML_CLASS xml_node_iterator$/;"	c	namespace:pugi
xml_node_type	include/pugixml.hpp	/^	enum xml_node_type$/;"	g	namespace:pugi
xml_object_range	include/pugixml.hpp	/^		xml_object_range(It b, It e): _begin(b), _end(e)$/;"	f	class:pugi::xml_object_range
xml_object_range	include/pugixml.hpp	/^	template <typename It> class xml_object_range$/;"	c	namespace:pugi
xml_parse_result	include/pugixml.hpp	/^	struct PUGIXML_CLASS xml_parse_result$/;"	s	namespace:pugi
xml_parse_status	include/pugixml.hpp	/^	enum xml_parse_status$/;"	g	namespace:pugi
xml_text	include/pugixml.hpp	/^	class PUGIXML_CLASS xml_text$/;"	c	namespace:pugi
xml_tree_walker	include/pugixml.hpp	/^	class PUGIXML_CLASS xml_tree_walker$/;"	c	namespace:pugi
xml_writer	include/pugixml.hpp	/^	class PUGIXML_CLASS xml_writer$/;"	c	namespace:pugi
xml_writer_file	include/pugixml.hpp	/^	class PUGIXML_CLASS xml_writer_file: public xml_writer$/;"	c	namespace:pugi
xml_writer_stream	include/pugixml.hpp	/^	class PUGIXML_CLASS xml_writer_stream: public xml_writer$/;"	c	namespace:pugi
xpath_exception	include/pugixml.hpp	/^	class PUGIXML_CLASS xpath_exception: public std::exception$/;"	c	namespace:pugi
xpath_node	include/pugixml.hpp	/^	class PUGIXML_CLASS xpath_node$/;"	c	namespace:pugi
xpath_node_set	include/pugixml.hpp	/^	class PUGIXML_CLASS xpath_node_set$/;"	c	namespace:pugi
xpath_parse_result	include/pugixml.hpp	/^	struct PUGIXML_CLASS xpath_parse_result$/;"	s	namespace:pugi
xpath_query	include/pugixml.hpp	/^	class PUGIXML_CLASS xpath_query$/;"	c	namespace:pugi
xpath_type_boolean	include/pugixml.hpp	/^		xpath_type_boolean	  \/\/ Boolean$/;"	e	enum:pugi::xpath_value_type
xpath_type_node_set	include/pugixml.hpp	/^		xpath_type_node_set,  \/\/ Node set (xpath_node_set)$/;"	e	enum:pugi::xpath_value_type
xpath_type_none	include/pugixml.hpp	/^		xpath_type_none,	  \/\/ Unknown type (query failed to compile)$/;"	e	enum:pugi::xpath_value_type
xpath_type_number	include/pugixml.hpp	/^		xpath_type_number,	  \/\/ Number$/;"	e	enum:pugi::xpath_value_type
xpath_type_string	include/pugixml.hpp	/^		xpath_type_string,	  \/\/ String$/;"	e	enum:pugi::xpath_value_type
xpath_value_type	include/pugixml.hpp	/^	enum xpath_value_type$/;"	g	namespace:pugi
xpath_variable	include/pugixml.hpp	/^	class PUGIXML_CLASS xpath_variable$/;"	c	namespace:pugi
xpath_variable_set	include/pugixml.hpp	/^	class PUGIXML_CLASS xpath_variable_set$/;"	c	namespace:pugi
~xml_writer	include/pugixml.hpp	/^		virtual ~xml_writer() {}$/;"	f	class:pugi::xml_writer
main	src/shaman.cpp	/^int main () {$/;"	f
test	src/shmparser.cpp	/^SHMString SHMParser::test(SHMString address) {$/;"	f	class:SHMParser
SHMParser	src/shmparser.h	/^class SHMParser {$/;"	c
SHMFileStream	src/shmtypes.h	/^typedef std::ifstream SHMFileStream;$/;"	t
SHMString	src/shmtypes.h	/^typedef std::string SHMString;/;"	t
