`-FunctionDecl 0x103030ae0 <input/teste.c:3:1, line:16:1> main 'int ()'
  `-CompoundStmt 0x1030314c0 <line:4:1, line:16:1>
    |-DeclStmt 0x103030d08 <line:5:3, col:21>
    | |-VarDecl 0x103030b90 <col:3, col:7> c 'int'
    | |-VarDecl 0x103030c00 <col:3, col:10> n 'int'
    | `-VarDecl 0x103030c70 <col:3, col:20> fact 'int'
    |   `-IntegerLiteral 0x103030cc8 <col:20> 'int' 1
    |-CallExpr 0x103030e20 <line:7:3, col:56> 'int'
    | |-ImplicitCastExpr 0x103030e08 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x103030d20 <col:3> 'int (const char *, ...)' Function 0x10301be30 'printf' 'int (const char *, ...)'
    | `-ImplicitCastExpr 0x103030e68 <col:10> 'const char *' <BitCast>
    |   `-ImplicitCastExpr 0x103030e50 <col:10> 'char *' <ArrayToPointerDecay>
    |     `-StringLiteral 0x103030d88 <col:10> 'char [44]' lvalue "Enter a number to calculate it's factorial\n"
    |-CallExpr 0x103030fd0 <line:8:3, col:17> 'int'
    | |-ImplicitCastExpr 0x103030fb8 <col:3> 'int (*)(const char *restrict, ...)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x103030e80 <col:3> 'int (const char *restrict, ...)' Function 0x10301cac0 'scanf' 'int (const char *restrict, ...)'
    | |-ImplicitCastExpr 0x103031020 <col:9> 'const char *' <BitCast>
    | | `-ImplicitCastExpr 0x103031008 <col:9> 'char *' <ArrayToPointerDecay>
    | |   `-StringLiteral 0x103030ee8 <col:9> 'char [3]' lvalue "%d"
    | `-UnaryOperator 0x103030f68 <col:15, col:16> 'int *' prefix '&'
    |   `-DeclRefExpr 0x103030f18 <col:16> 'int' lvalue Var 0x103030c00 'n' 'int'
    |-ForStmt 0x103031290 <line:10:3, line:11:19>
    | |-BinaryOperator 0x103031080 <line:10:8, col:12> 'int' '='
    | | |-DeclRefExpr 0x103031038 <col:8> 'int' lvalue Var 0x103030b90 'c' 'int'
    | | `-IntegerLiteral 0x103031060 <col:12> 'int' 1
    | |-<<<NULL>>>
    | |-BinaryOperator 0x103031128 <col:15, col:20> 'int' '<='
    | | |-ImplicitCastExpr 0x1030310f8 <col:15> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1030310a8 <col:15> 'int' lvalue Var 0x103030b90 'c' 'int'
    | | `-ImplicitCastExpr 0x103031110 <col:20> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1030310d0 <col:20> 'int' lvalue Var 0x103030c00 'n' 'int'
    | |-UnaryOperator 0x103031178 <col:23, col:24> 'int' postfix '++'
    | | `-DeclRefExpr 0x103031150 <col:23> 'int' lvalue Var 0x103030b90 'c' 'int'
    | `-BinaryOperator 0x103031268 <line:11:5, col:19> 'int' '='
    |   |-DeclRefExpr 0x103031198 <col:5> 'int' lvalue Var 0x103030c70 'fact' 'int'
    |   `-BinaryOperator 0x103031240 <col:12, col:19> 'int' '*'
    |     |-ImplicitCastExpr 0x103031210 <col:12> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x1030311c0 <col:12> 'int' lvalue Var 0x103030c70 'fact' 'int'
    |     `-ImplicitCastExpr 0x103031228 <col:19> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1030311e8 <col:19> 'int' lvalue Var 0x103030b90 'c' 'int'
    |-CallExpr 0x1030313e0 <line:13:3, col:43> 'int'
    | |-ImplicitCastExpr 0x1030313c8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1030312d0 <col:3> 'int (const char *, ...)' Function 0x10301be30 'printf' 'int (const char *, ...)'
    | |-ImplicitCastExpr 0x103031438 <col:10> 'const char *' <BitCast>
    | | `-ImplicitCastExpr 0x103031420 <col:10> 'char *' <ArrayToPointerDecay>
    | |   `-StringLiteral 0x103031338 <col:10> 'char [22]' lvalue "Factorial of %d = %d\n"
    | |-ImplicitCastExpr 0x103031450 <col:36> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x103031378 <col:36> 'int' lvalue Var 0x103030c00 'n' 'int'
    | `-ImplicitCastExpr 0x103031468 <col:39> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x1030313a0 <col:39> 'int' lvalue Var 0x103030c70 'fact' 'int'
    `-ReturnStmt 0x1030314a0 <line:15:3, col:10>
      `-IntegerLiteral 0x103031480 <col:10> 'int' 0
