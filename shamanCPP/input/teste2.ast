`-FunctionDecl 0x1028c62e0 <input/teste2.c:3:1, line:16:1> main 'int ()'
  `-CompoundStmt 0x1028c6cc0 <line:4:1, line:16:1>
    |-DeclStmt 0x1028c6508 <line:5:3, col:21>
    | |-VarDecl 0x1028c6390 <col:3, col:7> c 'int'
    | |-VarDecl 0x1028c6400 <col:3, col:10> n 'int'
    | `-VarDecl 0x1028c6470 <col:3, col:20> fact 'int'
    |   `-IntegerLiteral 0x1028c64c8 <col:20> 'int' 1
    |-CallExpr 0x1028c6620 <line:7:3, col:56> 'int'
    | |-ImplicitCastExpr 0x1028c6608 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1028c6520 <col:3> 'int (const char *, ...)' Function 0x1028b1630 'printf' 'int (const char *, ...)'
    | `-ImplicitCastExpr 0x1028c6668 <col:10> 'const char *' <BitCast>
    |   `-ImplicitCastExpr 0x1028c6650 <col:10> 'char *' <ArrayToPointerDecay>
    |     `-StringLiteral 0x1028c6588 <col:10> 'char [44]' lvalue "Enter a number to calculate it's factorial\n"
    |-CallExpr 0x1028c67d0 <line:8:3, col:17> 'int'
    | |-ImplicitCastExpr 0x1028c67b8 <col:3> 'int (*)(const char *restrict, ...)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1028c6680 <col:3> 'int (const char *restrict, ...)' Function 0x1028b22c0 'scanf' 'int (const char *restrict, ...)'
    | |-ImplicitCastExpr 0x1028c6820 <col:9> 'const char *' <BitCast>
    | | `-ImplicitCastExpr 0x1028c6808 <col:9> 'char *' <ArrayToPointerDecay>
    | |   `-StringLiteral 0x1028c66e8 <col:9> 'char [3]' lvalue "%d"
    | `-UnaryOperator 0x1028c6768 <col:15, col:16> 'int *' prefix '&'
    |   `-DeclRefExpr 0x1028c6718 <col:16> 'int' lvalue Var 0x1028c6400 'n' 'int'
    |-ForStmt 0x1028c6a90 <line:10:3, line:11:19>
    | |-BinaryOperator 0x1028c6880 <line:10:8, col:12> 'int' '='
    | | |-DeclRefExpr 0x1028c6838 <col:8> 'int' lvalue Var 0x1028c6390 'c' 'int'
    | | `-IntegerLiteral 0x1028c6860 <col:12> 'int' 1
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1028c6928 <col:15, col:20> 'int' '<='
    | | |-ImplicitCastExpr 0x1028c68f8 <col:15> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1028c68a8 <col:15> 'int' lvalue Var 0x1028c6390 'c' 'int'
    | | `-ImplicitCastExpr 0x1028c6910 <col:20> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1028c68d0 <col:20> 'int' lvalue Var 0x1028c6400 'n' 'int'
    | |-UnaryOperator 0x1028c6978 <col:23, col:24> 'int' postfix '++'
    | | `-DeclRefExpr 0x1028c6950 <col:23> 'int' lvalue Var 0x1028c6390 'c' 'int'
    | `-BinaryOperator 0x1028c6a68 <line:11:5, col:19> 'int' '='
    |   |-DeclRefExpr 0x1028c6998 <col:5> 'int' lvalue Var 0x1028c6470 'fact' 'int'
    |   `-BinaryOperator 0x1028c6a40 <col:12, col:19> 'int' '*'
    |     |-ImplicitCastExpr 0x1028c6a10 <col:12> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x1028c69c0 <col:12> 'int' lvalue Var 0x1028c6470 'fact' 'int'
    |     `-ImplicitCastExpr 0x1028c6a28 <col:19> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1028c69e8 <col:19> 'int' lvalue Var 0x1028c6390 'c' 'int'
    |-CallExpr 0x1028c6be0 <line:13:3, col:43> 'int'
    | |-ImplicitCastExpr 0x1028c6bc8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1028c6ad0 <col:3> 'int (const char *, ...)' Function 0x1028b1630 'printf' 'int (const char *, ...)'
    | |-ImplicitCastExpr 0x1028c6c38 <col:10> 'const char *' <BitCast>
    | | `-ImplicitCastExpr 0x1028c6c20 <col:10> 'char *' <ArrayToPointerDecay>
    | |   `-StringLiteral 0x1028c6b38 <col:10> 'char [22]' lvalue "Factorial of %d = %d\n"
    | |-ImplicitCastExpr 0x1028c6c50 <col:36> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1028c6b78 <col:36> 'int' lvalue Var 0x1028c6400 'n' 'int'
    | `-ImplicitCastExpr 0x1028c6c68 <col:39> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x1028c6ba0 <col:39> 'int' lvalue Var 0x1028c6470 'fact' 'int'
    `-ReturnStmt 0x1028c6ca0 <line:15:3, col:10>
      `-IntegerLiteral 0x1028c6c80 <col:10> 'int' 0
